[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "title": "Hands-on Exercise 3b",
    "section": "",
    "text": "This exercise covers how to create animated data visualisation by using gganimate and plotly r packages, and how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\ntheory: a summary of R for Visual Analytics - Chap 4"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 3b",
    "section": "Installing and loading the required libraries",
    "text": "Installing and loading the required libraries\nIn this exercise, plotly, idyverse, gganimate, gifski, gapminder packages are used. A summary of the new packages introduced can be found at the section below.\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#importing-data",
    "title": "Hands-on Exercise 3b",
    "section": "Importing data",
    "text": "Importing data\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\nUsing mutate_at()Using across()\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#basic-concepts-of-animation",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#basic-concepts-of-animation",
    "title": "Hands-on Exercise 3b",
    "section": "Basic concepts of animation",
    "text": "Basic concepts of animation\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#terminology",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#terminology",
    "title": "Hands-on Exercise 3b",
    "section": "Terminology",
    "text": "Terminology\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\nThings to consider:\n\nDoes it makes sense to go through the effort?\n\nexploratory data analysis: a animated graphic may not be worth the time investment.\npresentation: a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#packages",
    "title": "Hands-on Exercise 3b",
    "section": "Packages",
    "text": "Packages\nIn this exercise, beside tidyverse, 3 new R packages will be used. They are:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#gganimate",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#gganimate",
    "title": "Hands-on Exercise 3b",
    "section": "gganimate",
    "text": "gganimate\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\nBasicBuilding the animated bubble plot\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "title": "Hands-on Exercise 3b",
    "section": "Animated Data Visualisation: plotly",
    "text": "Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\nBuilding an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\nBuilding an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#reference",
    "title": "Hands-on Exercise 3b",
    "section": "Reference",
    "text": "Reference\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01a.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01a.html",
    "title": "In-class Exercise 1a: Now You 👀 It!",
    "section": "",
    "text": "In this hands-on exercise, 2 R packages will be used. They are:\n\ntidyverse\nhaven\n\nThe code chunk used as follows:\n\npacman::p_load(tidyverse,haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01a.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01a.html#loading-r-packages",
    "title": "In-class Exercise 1a: Now You 👀 It!",
    "section": "",
    "text": "In this hands-on exercise, 2 R packages will be used. They are:\n\ntidyverse\nhaven\n\nThe code chunk used as follows:\n\npacman::p_load(tidyverse,haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01a.html#filtering-pisa-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01a.html#filtering-pisa-data",
    "title": "In-class Exercise 1a: Now You 👀 It!",
    "section": "Filtering PISA data",
    "text": "Filtering PISA data\n\n\n\n\n\n\nNote\n\n\n\nthe code under this section filtered PISA data to include only SG data\nthe dataset is saved as a rds file called stu_qqq_SG.rds and loaded back as a dataframe.\nonly stu_qqq_SG.rds will be imported for efficiency purpose for the rest of exercise.\n\n\nThe code chunk below uses read_sas() of haven to import PISA data into R environment.\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\nThe code chunk below use filter() of dplyr to filter observation in SG only.\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\nThe code chunk below use write_rds() to save the data into rds format.\n\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01a.html#importing-filtered-pisa-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01a.html#importing-filtered-pisa-data",
    "title": "In-class Exercise 1a: Now You 👀 It!",
    "section": "Importing filtered PISA data",
    "text": "Importing filtered PISA data\nThe code chunk below uses read_rds() to import PISA SG data into R environment.\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "This exercise aims to use data analysis methods to improve some of the visualizations produced for exercise 1. The original analysis could be found through this link\nThe complete project brief could be found here.\n\n\nThe 2022 Programme for International Student Assessment (PISA) data, released on December 5, 2022, assesses global education systems by testing 15-year-olds in mathematics, reading, and science. The PISA 2022 database includes responses from students, schools, and parents across five data files, primarily in SAS and SPSS formats.\nThe dataset used for this exercise is a pre-engineered dataset followed the same instructions of data preperation given in the source.\n\n\n\nThis take-home exercise covers\n\ncritic of the original submission in terms of clarity and aesthetics\nsketch for the alternative design\nremake of the original design using ggplot2, ggplot2 extensions and tidyverse packages."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "The 2022 Programme for International Student Assessment (PISA) data, released on December 5, 2022, assesses global education systems by testing 15-year-olds in mathematics, reading, and science. The PISA 2022 database includes responses from students, schools, and parents across five data files, primarily in SAS and SPSS formats.\nThe dataset used for this exercise is a pre-engineered dataset followed the same instructions of data preperation given in the source."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#project-task",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#project-task",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "This take-home exercise covers\n\ncritic of the original submission in terms of clarity and aesthetics\nsketch for the alternative design\nremake of the original design using ggplot2, ggplot2 extensions and tidyverse packages."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#loading-r-packages",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#loading-r-packages",
    "title": "Take-home Exercise 2",
    "section": "Loading R packages",
    "text": "Loading R packages\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               ggdist, ggridges,\n               colorspace,ggstatsplot, \n               tidyverse)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-filtered-pisa-data-for-sg-students",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-filtered-pisa-data-for-sg-students",
    "title": "Take-home Exercise 2",
    "section": "Importing filtered PISA data for SG students",
    "text": "Importing filtered PISA data for SG students\n\nThe code chunk below uses read_rds() to import PISA SG data into R environment.\n\nfiltered_data &lt;- read_rds(\"data/filtered_data.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#overall-critique",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#overall-critique",
    "title": "Take-home Exercise 2",
    "section": "Overall Critique",
    "text": "Overall Critique\nThe submission presents a thorough analysis, with commendable clarity and aesthetic consistency.\n\nStrengths\n\nClarity\n\nExtremely comprehensive introduction supported by external references, readings, and PISA report.\nThe selection of variables and the data preparation process are both logical and well-justified, which contributes to the persuasive and clear narrative of the report.\nFlowcharts designed to be both visually appealing and informative, providing a clear understanding of the data structure employed.\nThe analytical approach is engaging, particularly the comparative examination of the top and bottom five schools.\n\n\n\nAesthetic\n\nThere is a commendable uniformity across the submission, with a consistent color theme, style, layout, and aspect ratio maintained throughout.\nTitles and subtitles are well-crafted, and the labeling on the patched plot is especially effective in preventing misunderstandings.\n\n\n\n\nAreas for Improvement\n\nClarity\n\nA cross-subject comparison could offer additional insights into performance variations among different subjects. Although the analysis is conducted in parallel across subjects, presenting multiple charts under 1 subject simultaneously may hinder the audience’s ability to make intuitive comparisons and contrasts.\nThere are missed opportunities to highlight and draw attention to the key insights derived from the graphs.\n\n\n\nAesthetic\n\nThe chart aspect ratios are not fully optimized for computer screens, which could affect readability.\nSome chart elements, such as color choices and transparency levels, result in an overlap of information that may be difficult to discern."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#plot-1-evaluation",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#plot-1-evaluation",
    "title": "Take-home Exercise 2",
    "section": "Plot 1 Evaluation",
    "text": "Plot 1 Evaluation\n\nOriginal Design Intent\n\nThis plot serves as an introduction to the variables analyzed in the study, providing the reader with an overview of the sample size and distribution characteristics before delving into deeper analysis.\n\n\nCritique\nNote: Positive Aspects Highlighted in Red, Areas for Improvement Highlighted in Blue. Each point in the description could be refereed to the diagram below\n\n\nStrengths\nClarity\n\np1: The title succinctly encapsulates the main takeaway of the plot, effectively pointing out the right-skewed distribution and offering a summary that orients the reader.\np2: The arrangement of three plausible value (PV) distributions across subjects in a vertical format allows for straightforward comparison of the histograms’ peaks and shapes along a consistent x-axis.\np3: Sub-title is clear and informative\n\nAesthetic\n\np4: grid line in lighter color, good hieghachy of information\np5: extremely consistent use of color, style, font size etc.\n\n\n\nAreas for Improvement\nClarity\n\np1: The title could be expanded to encapsulate all the information presented in the chart.\np2: While histograms are useful for showing general distribution, boxplots might reveal additional details like outliers. This applies to ESCS histogram as well.\np3: The inconsistent y-axis scale across different subjects could lead to misinterpretation when comparing population sizes across grades.\np4: The distribution of PVs lacks guideline indicators such as mean or median values, which could enhance interpretability.\np6: The similar height of the gender distribution bars could be more informative if annotated with exact numbers.\n\nAesthetic\n\np1: A central title with a larger font could improve the visual hierarchy.\np5: The base of the x-axis should feature a slightly darker color to ground the distribution.\np7: The chart’s aspect ratio is not well-suited for computer screens, leading to potential display issues and readability challenges.\n\n\n\n\nSketch\n\nimprovements based on the above 9 points mentioned earlier:\n\np1: Main title should be centered to better balance the visual layout. Additionally, the title has been broadened to encompass all the information presented in the diagram, ensuring a more holistic representation.\np2: Boxplots should be added to each distribution to reveal more in-depth information. This is particularly effective in identifying and presenting outliers, providing a clearer understanding of data variances.\np3: The scales for all 3 y-axes corresponding to different subjects should be adjusted for alignment. This ensures a consistent and fair comparison across subjects.\np4: Add guidelines highlight the mean scores across students, offering a quick reference to these central data points, aiding in immediate comprehension of average performances.\np5: The inclusion of minor gridlines at 100-unit intervals to provide a more detailed and precise scale for measurement, enhancing the plot’s usability.\np6: Labels indicating the number of samples in each gender category to offer immediate quantitative understanding of gender distribution within the sample.\np7: Switch layout to a landscape orientation, catering to computer screen dimensions to improve readability and overall user experience when interacting with the data on digital platforms.\n\n\n\nMake Over\n\n\nShow the code\nmath &lt;- ggplot(data=filtered_data, \n             aes(x = MATH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\",\n                 linewidth=0.3) +\n  geom_boxplot(width = 50,\n               fill = \"white\", \n               color = \"black\",\n               outlier.colour = \"#c73824\",\n               outlier.fill = \"#c73824\",\n               outlier.size = 1,\n               outlier.alpha = 0.2) +\n  coord_cartesian(xlim=c(0,1000), ylim=c(0,1000)) +\n  ggtitle(\"Distribution of Math Scores\") + \n  geom_vline(data = filtered_data %&gt;%\n               summarize(mean_score = mean(MATH), median_score = median(MATH)),\n             aes(xintercept = mean_score), color = \"#c73824\", linetype = \"dashed\") +  \n  geom_text(data = filtered_data %&gt;%\n               summarize(mean_score = mean(MATH), median_score = median(MATH)),\n             aes(x = mean_score - 100, y = Inf, label = paste(\"Mean:\", round(mean_score, 2))), color = \"#c73824\", vjust = 1, size = 3) +\n  scale_x_continuous(breaks=seq(0, 1000, by=200),  \n                     minor_breaks=seq(0, 1000, by=100))  \n\nread &lt;- ggplot(data=filtered_data, \n             aes(x = READ)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\",\n                 linewidth=0.3) +\n  geom_boxplot(width = 50,\n               fill = \"white\", \n               color = \"black\",\n               outlier.colour = \"#c73824\",\n               outlier.fill = \"#c73824\",\n               outlier.size = 1,\n               outlier.alpha = 0.2) +\n  coord_cartesian(xlim=c(0,1000), ylim=c(0,1000)) +\n  ggtitle(\"Distribution of Reading Scores\") + \n  geom_vline(data = filtered_data %&gt;%\n               summarize(mean_score = mean(READ), median_score = median(READ)),\n             aes(xintercept = mean_score), color = \"#c73824\", linetype = \"dashed\") +  \n  geom_text(data = filtered_data %&gt;%\n               summarize(mean_score = mean(READ), median_score = median(READ)),\n             aes(x = mean_score - 100, y = Inf, label = paste(\"Mean:\", round(mean_score, 2))), color = \"#c73824\", vjust = 1, size = 3) +\n  scale_x_continuous(breaks=seq(0, 1000, by=200),  \n                     minor_breaks=seq(0, 1000, by=100)) + \n  theme(plot.title = element_text(size = 12)) \n\nsci &lt;- ggplot(data=filtered_data, \n             aes(x = SCIENCE)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\",\n                 linewidth=0.3) +\n  geom_boxplot(width = 50,\n               fill = \"white\", \n               color = \"black\",\n               outlier.colour = \"#c73824\",\n               outlier.fill = \"#c73824\",\n               outlier.size = 1,\n               outlier.alpha = 0.2) +\n  coord_cartesian(xlim=c(0,1000), ylim=c(0,1000)) +\n  ggtitle(\"Distribution of Science Scores\") + \n  geom_vline(data = filtered_data %&gt;%\n               summarize(mean_score = mean(SCIENCE), median_score = median(SCIENCE)),\n             aes(xintercept = mean_score), color = \"#c73824\", linetype = \"dashed\") +  \n  geom_text(data = filtered_data %&gt;%\n               summarize(mean_score = mean(SCIENCE), median_score = median(SCIENCE)),\n             aes(x = mean_score - 100, y = Inf, label = paste(\"Mean:\", round(mean_score, 2))), color = \"#c73824\", vjust = 1, size = 3) +\n  scale_x_continuous(breaks=seq(0, 1000, by=200),  \n                     minor_breaks=seq(0, 1000, by=100))  \n\nses &lt;- ggplot(data=filtered_data, \n             aes(x = SES)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\",\n                 linewidth = 0.3) +\n  geom_boxplot(width = 50,\n               fill = \"white\", \n               color = \"black\",\n               outlier.colour = \"#c73824\",\n               outlier.fill = \"#c73824\",\n               outlier.size = 1,\n               outlier.alpha = 0.2) +\n  coord_cartesian(xlim=c(-5,5), ylim = c(0,1500)) +\n  ggtitle(\"Distribution of SES\") + \n  geom_vline(data = filtered_data %&gt;%\n                 summarize(mean_score = mean(SES), median_score = median(SES)),\n             aes(xintercept = mean_score), color = \"#c73824\", linetype = \"dashed\") +  \n  geom_text(data = filtered_data %&gt;%\n               summarize(mean_score = mean(SES), median_score = median(SES)),\n             aes(x = mean_score - 1, y = Inf, label = paste(\"Mean:\", round(mean_score, 2))), color = \"#c73824\", vjust = 1, size = 3) \n\ngender &lt;- ggplot(data=filtered_data, \n             aes(x = GENDER)) +\n   geom_bar(color=\"grey25\", fill=\"grey90\", linewidth =0.2) +\n   geom_text(stat = 'count', aes(label = after_stat(count)), vjust = -0.3) + \n   coord_cartesian(xlim=c(0,3), ylim =c(0,4000)) +\n  ggtitle(\"Distribution of Gender\")\n\npatchwork &lt;- ( math / read/ sci) | (ses / gender)\npatchwork &lt;- patchwork + \n  plot_annotation(\n    title = \"Distributions Across Subjects Preformance, Socialeconomic Status and Gender\",\n    theme = theme(plot.title = element_text(size = 50))  \n  )\npatchwork & theme_fivethirtyeight(base_size = 7) +\n  theme(\n    panel.grid.minor.x = element_line(linewidth = 0.2, linetype = 'solid', colour = \"grey85\"),\n    plot.title = element_text(face = \"bold\", hjust = 0.5)\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#plot-2-evaluation",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#plot-2-evaluation",
    "title": "Take-home Exercise 2",
    "section": "Plot 2 Evaluation",
    "text": "Plot 2 Evaluation\n\nOriginal Design Intent\n\nThis plot synthesizes a comprehensive analysis of Singaporean students’ performance in mathematics, taking into account various factors including school, gender, and socioeconomic status. Given that the same layout is applied to the other two subjects, this evaluation will concentrate on mathematics performance as a representative example.\n\n\nCritique - Overall\nNote: Positive Aspects Highlighted in Red, Areas for Improvement Highlighted in Blue. Each point in the description could be refereed to the diagram below\n\n\nStrengths\nClarity\n\np1: The title succinctly encapsulates the main takeaway of the plot\np2: Sub-title is clear and informative\np3: Interesting to include OECD mean value as a benchmark introduces a comparative dimension to the analysis, enriching the narrative around Singapore’s performance.\n\nAesthetic\n\np4: grid line in lighter color, good hierarchy of information, extremely consistent use of color, style, font size etc.\n\n\n\nAreas for Improvement\nClarity\n\np1: The repeated presentation of histograms may lead to redundant information if they do not offer new insights beyond previous charts.\np2: While the plot compares performance across gender, socioeconomic status, and schools for each subject, it misses the opportunity to analyze these factors in parallel across different subjects, which could provide a more holistic understanding.\n\nAesthetic\n\np1: The current proportions of the histogram are too narrow, making it challenging to view all data on one screen and hindering readability.\n\nTo enhance the analytical narrative and provide a clearer comparative perspective, it would be advantageous to reorganize the data presentation structure for a more focused analysis on each thematic factor, facilitating a deeper understanding of how each influences performance across different academic disciplines. Such an approach could reveal more nuanced insights and trends that might be obscured in the current subject-by-subject layout\n\n\n\nCritique - School\nNote: Positive Aspects Highlighted in Red, Areas for Improvement Highlighted in Blue. Each point in the description could be refereed to the diagram below\n\n\nStrengths\nClarity\n\np1: The use of density plots is an effective choice for illustrating the relationship between schools, with a smart focus on comparing only the top and bottom 5 schools for clarity.\np2: The inclusion of mean value lines provides a clear reference point, offering an informative range indication.\n\nAesthetic\n\np3: The application of a color gradient effectively differentiates scoring ranges, aiding in visual interpretation.\np4: grid line in lighter color, good hierarchy of information, extremely consistent use of color, style, font size etc.\n\n\n\nAreas for Improvement\nClarity\n\np1: The title is too general and fails to convey critical insights or specific focus of the analysis.\np2: The chart is limited to presenting data for a single subject, which restricts broader comparative analysis.\np3: Guideline annotations lack labels\np4: The use of quantiles for each school may not be necessary in this context. Given the varying performance and sample sizes across schools, a general trend might suffice to convey the intended message.\np5: The absence of y-axis labels detracts from the interpretability of the data.\np6: Inconsistent x-axis scales across different subjects can introduce bias in parallel comparisons.\n\nAesthetic\n\np7: The color scheme might not be distinct enough to differentiate clearly between the lower and upper 5 schools, potentially hindering quick visual differentiation.\n\n\n\n\nSketch\n\nimprovements based on the above points mentioned earlier:\n\np1: Main title should be centered to better balance the visual layout. Additionally, the title should use to highlight key information in the chart\np2: Combining grades from different subjects for the top and bottom 5 schools into a single chart could be more effective. Since the focus is on the distribution patterns rather than specific school identities, this approach will facilitate a clearer comparative analysis.\np3: Enhance clarity by adding informative annotations along the mean line.\np4: The quantile lines, deemed unnecessary for this context, have been removed to simplify the visual presentation and focus on the most relevant data trends.\np5: The y-axis has been clearly labeled, ensuring that viewers can easily interpret the data and understand the variables being analyzed.\np6: The x-axis has been standardized across different subjects to maintain consistency and avoid any potential bias in comparative analysis.\np7: Different shades or colors will be used to represent different subjects, enabling a more intuitive distinction between them and enhancing the overall readability of the chart.\n\n\n\nMake Over\n\n\nShow the code\n# create dataframe to store school ranking information\ntop_bottom_schools_df &lt;- data.frame(\n  SchoolID = character(),\n  Subject_Rank = integer(),\n  MeanScore = numeric(),\n  stringsAsFactors = FALSE\n)\n\nsubjects &lt;- c(\"MATH\", \"READ\", \"SCIENCE\")\n\nfor (subject in subjects) {\n  school_means &lt;- filtered_data %&gt;%\n    group_by(SCHOOLID) %&gt;%\n    summarize(MeanScore = mean(get(subject), na.rm = TRUE), .groups = 'drop')\n  \n  school_means &lt;- school_means %&gt;%\n    arrange(desc(MeanScore)) %&gt;%\n    mutate(Subject_Rank = rank(desc(MeanScore)))\n  \n  top_bottom &lt;- school_means %&gt;%\n    filter(Subject_Rank &lt;= 5 | Subject_Rank &gt;= (n() - 4))\n  \n  top_bottom$Subject &lt;- subject\n  \n  top_bottom_schools_df &lt;- bind_rows(top_bottom_schools_df, top_bottom)\n}\n\ntop_bottom_schools_wide &lt;- top_bottom_schools_df %&gt;%\n  select(-MeanScore) %&gt;%\n  pivot_wider(names_from = Subject, values_from = Subject_Rank)\n\ncolnames(top_bottom_schools_wide) &lt;- gsub(\"(.*)_Rank\", \"\\\\1\", colnames(top_bottom_schools_wide))\n\n\ntop_bottom_schools_wide &lt;- top_bottom_schools_wide %&gt;%\n  rename(\n    MATH_rank = MATH,\n    READ_rank = READ,\n    SCIENCE_rank = SCIENCE\n  )\n\n# join the dataframe\ndf &lt;- inner_join(filtered_data, top_bottom_schools_wide, by = \"SCHOOLID\")\ndf &lt;- df %&gt;%\n  mutate_at(vars(SCIENCE_rank,READ_rank,MATH_rank), as.factor)\n\n# Create the ggplot\nggplot(df %&gt;% filter(!is.na(SCIENCE_rank)), aes(x = SCIENCE, y = SCIENCE_rank)) +\n  stat_density_ridges(\n    aes(fill = \"Science\"),  \n    calc_ecdf = TRUE,\n    color = \"black\",\n    alpha = 0,\n    linetype = \"solid\",\n    scale = 0.8,\n    linewidth = 0.5\n  ) +\n  stat_density_ridges(\n    data = df %&gt;% filter(!is.na(MATH_rank)),  \n    aes(x = MATH, y = MATH_rank, fill = \"Math\"),  \n    calc_ecdf = TRUE,\n    fill = \"grey20\",  \n    linewidth = 0,\n    alpha = 0.3,\n    scale = 0.8  \n  ) +\n  stat_density_ridges(\n    data = df %&gt;% filter(!is.na(READ_rank)),  \n    aes(x = READ, y = READ_rank, fill = \"Reading\"),  \n    calc_ecdf = TRUE,\n    color = \"red\",  \n    alpha = 0,\n    linetype = \"dotted\",\n    scale = 0.8,\n    linewidth = 0.7\n  ) +\n  labs(y = \"School ID\", x = \"Scores\") +\n  scale_x_continuous(breaks = seq(0, 1000, 100)) +\n  ylab(\"School ID\") +\n  ggtitle(\"Science, Math, and Reading Scores between Top and Bottom 5 Schools\") +\n  theme_fivethirtyeight() +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  theme(legend.position = \"none\")  \n\n\n\n\n\nAlternatively, another approach is to analyze the school in a broader context by examining the distribution of school scores across all subjects among the surveyed schools, rather than focusing solely on the performance of students from a specific school.\n\nimprovements based on the above points mentioned earlier:\n\np1: Rather than comparing between schools, the analysis will focus on comparing performance across subjects based on school performance.\np2: For each subject, visual representations such as density plots, box plots, and dotted plots will be used to illustrate the distribution of school performance.\np3: The analysis will highlight the top and bottom 3 scorers in each subject to provide additional context\n\n\n\nShow the code\nschool_means &lt;- filtered_data %&gt;%\n  group_by(SCHOOLID) %&gt;%\n  summarize(MeanMathScore = mean(MATH, na.rm = TRUE), \n            MeanReadScore = mean(READ, na.rm = TRUE), \n            MeanSciScore = mean(SCIENCE, na.rm = TRUE), \n            .groups = 'drop'\n            )\n\ntop_bottom_schools &lt;- school_means %&gt;%\n  mutate(TopMath = rank(-MeanMathScore) &lt;= 3,\n         BottomMath = rank(MeanMathScore) &lt;= 3,\n         TopRead = rank(-MeanReadScore) &lt;= 3,\n         BottomRead = rank(MeanReadScore) &lt;= 3,\n         TopSci = rank(-MeanSciScore) &lt;= 3,\n         BottomSci = rank(MeanSciScore) &lt;= 3)\n\nlong_school_means &lt;- top_bottom_schools %&gt;%\n  gather(key = \"Subject\", value = \"Score\", MeanMathScore, MeanReadScore, MeanSciScore)\n\nhighlighted_schools &lt;- long_school_means %&gt;%\n  mutate(Highlight = ifelse((Subject == \"MeanMathScore\" & (TopMath | BottomMath)) |\n                            (Subject == \"MeanReadScore\" & (TopRead | BottomRead)) |\n                            (Subject == \"MeanSciScore\" & (TopSci | BottomSci)),\n                            \"Highlighted\", \"Normal\")) %&gt;%\n  filter(Highlight == \"Highlighted\")\n\nmean_math &lt;- mean(filtered_data$MATH, na.rm = TRUE)\nmean_read &lt;- mean(filtered_data$READ, na.rm = TRUE)\nmean_sci &lt;- mean(filtered_data$SCIENCE, na.rm = TRUE)\n\nggplot(long_school_means, aes(x = Score, y = Subject)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               height = 0.4) +\n  geom_boxplot(width = .15, outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.1, \n            binwidth = 3,\n            dotsize = 1.1,\n            alpha = 0.4,\n            fill = \"#0477bf\", \n            color = \"#0477bf\") +\n  geom_point(data = highlighted_schools, aes(x = Score, y = Subject),\n             size = 1.3, alpha = 0.8, color = \"red\",\n             position = position_nudge(y = -0.11)) +\n  geom_segment(aes(x = mean_math, xend = mean_math, y = 0.8, yend = 1.2), color = \"#c73824\", linetype = \"dashed\") +\n  geom_text(aes(x = mean_math, y = 1.5, label = paste(\"National Math Mean:\", round(mean_math, 2))),\n            color = \"#c73824\", vjust = 4, size = 3) +\n  geom_segment(aes(x = mean_read, xend = mean_read, y = 1.8, yend = 2.2), color = \"#c73824\", linetype = \"dashed\") +\n  geom_text(aes(x = mean_read, y = 1.5, label = paste(\"National Reading Mean:\", round(mean_read, 2))),\n            color = \"#c73824\", vjust = - 13, size = 3) +\n  geom_segment(aes(x = mean_sci, xend = mean_sci, y = 2.8, yend = 3.2), color = \"#c73824\", linetype = \"dashed\") +\n  geom_text(aes(x = mean_sci, y = 1.5, label = paste(\"National Science Mean:\", round(mean_sci, 2))),\n            color = \"#c73824\", vjust = -30, size = 3) +\n  theme_fivethirtyeight() +\n  theme(legend.position = \"none\", \n        panel.grid.major.x = element_line(color = \"grey80\", size = 0.3),\n        panel.grid.minor.x = element_line(color = \"grey80\", size = 0.2),\n        axis.text.x = element_text(hjust = 0.5),\n        plot.title = element_text(size = 15, hjust = 0.5)) +\n  labs(title = \"Performance Disparity Across Subjects in Singapore's Schools\") +\n  scale_x_continuous(breaks = seq(0, 1000, by = 100), \n                     minor_breaks = seq(0, 1000, by = 50)) +\n  scale_y_discrete(labels = c('Maths','Reading', 'Science')) \n\n\n\n\n\n\n\nCritique - Social Economic Status\nNote: Positive Aspects Highlighted in Red, Areas for Improvement Highlighted in Blue. Each point in the description could be refereed to the diagram below\n\n\nStrengths\nClarity\n\np1: Utilizing a scatterplot effectively uncovers the relationship between two continuous variables: scores and socioeconomic status, offering clear insights.\np2: The inclusion of a linear regression (lm) line serves as a helpful reference, revealing the nature of the relationship between these variables.\np3: The addition of guidelines, such as mean lines, provides valuable context for interpretation and facilitates comparisons across different subjects.\n\nAesthetic\n\np4: grid line in lighter color, good hierarchy of information, extremely consistent use of color, style, font size etc.\n\n\n\nAreas for Improvement\nClarity\n\np1: The title is overly broad and fails to convey the specific focus or key findings of the analysis.\np2: Guidelines are lacking labels\n\nAesthetic\n\np3: The scatterplot’s current opacity setting and black color make it difficult to discern the data density. Adjusting the opacity could greatly improve clarity.\np4: The reference line appears too solid, making it somewhat incongruent with the rest of the chart’s design. A subtler approach might be more fitting.\np5: The absence of labels on the y-axis diminishes the chart’s interpretability.\np6: The x-axis appears overly broad, with intervals set at 250. A narrower interval might enhance readability and detail.\n\n\n\nSketch\n\nimprovements based on the above points mentioned earlier:\n\np1: Main title should be centered to better balance the visual layout. Additionally, the title use to highlight key information in the chart\np2: Clear and informative annotations will be added along the mean line, providing contextual information to aid in data interpretation.\np4: Adjustments will be made to the scatterplot’s opacity and dot size, enhancing the visibility of data density patterns.\np5: The y-axis will be properly labeled, ensuring consistency and alignment across the three subjects within a single chart. This will aid in comparative analysis and improve readability.\np6: The x-axis will be standardized across the different subjects to maintain uniformity and prevent inconsistencies, facilitating more accurate parallel comparisons.\n\n\n\nMake Over\n\n\nShow the code\nmath_ses &lt;- ggplot(filtered_data, aes(x = MATH, y = SES)) +\n  geom_point(alpha = 0.03) +\n  geom_smooth(method = loess, size = 0.5, color = \"blue\") +\n  geom_vline(aes(xintercept = mean(MATH, na.rm = TRUE)), color = \"#c73824\", linetype = \"dashed\", size = 1) +\n  coord_cartesian(xlim = c(0, 1000), ylim = c(-5, 5)) +\n  theme_fivethirtyeight() +\n  labs(x = NULL, y = \"Social Economic Status Index\", title = \"Mathematics\") +\n  theme(\n        plot.title=element_text(size= 12, hjust= 0.5),\n        axis.text = element_text(size= 10),\n        ) +\n  annotate(\"text\", x = 400, y = 4, label = paste(\"Mean:\", round(mean(filtered_data$MATH, na.rm = TRUE), 2)), size = 3, color = \"#c73824\")\n\nread_ses &lt;- ggplot(filtered_data, aes(x = READ, y = SES)) +\n  geom_point(alpha = 0.03) +\n  geom_smooth(method = loess, size = 0.5, color = \"blue\") +\n  geom_vline(aes(xintercept = mean(READ, na.rm = TRUE)), color = \"#c73824\", linetype = \"dashed\", size = 1) +\n  coord_cartesian(xlim = c(0, 1000), ylim = c(-5, 5)) +\n  theme_fivethirtyeight() +\n  labs(title = \"Reading\") + \n  scale_y_continuous(breaks = seq(-5, 5, by = 2.5)) + \n  theme(axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        plot.title=element_text(size= 12, hjust= 0.5),\n        axis.text = element_text(size= 10),\n        legend.position = \"none\") +\n  annotate(\"text\", x = 400, y = 4, label = paste(\"Mean:\", round(mean(filtered_data$SCIENCE, na.rm = TRUE), 2)), size = 3, color = \"#c73824\")\n\nsci_ses &lt;- ggplot(filtered_data, aes(x = SCIENCE, y = SES)) +\n  geom_point(alpha = 0.03) +\n  geom_smooth(method = loess, size = 0.5, color = \"blue\") +\n  geom_vline(aes(xintercept = mean(SCIENCE, na.rm = TRUE)), color = \"#c73824\", linetype = \"dashed\", size = 1) +\n  coord_cartesian(xlim = c(0, 1000), ylim = c(-5, 5)) +\n  theme_fivethirtyeight() +\n  labs(title = \"Science\") + \n  scale_y_continuous(breaks = seq(-5, 5, by = 2.5)) + \n  theme(axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        plot.title=element_text(size= 12, hjust= 0.5),\n        axis.text = element_text(size= 10),\n        legend.position = \"none\") +\n  annotate(\"text\", x = 400, y = 4, label = paste(\"Mean:\", round(mean(filtered_data$READ, na.rm = TRUE), 2)), size = 3, color = \"#c73824\")\n\np1 &lt;- (math_ses + read_ses + sci_ses) + \n  plot_annotation(title= \"Moderate Linear Relationship between Social Economic Status and Performance \",\n                  theme = theme_fivethirtyeight() +\n                    theme(plot.title = element_text(size = 15, hjust = 0.5))\n                  )\n\np1\n\n\n\n\n\n\n\n\nCritique - Gender\nNote: Positive Aspects Highlighted in Red, Areas for Improvement Highlighted in Blue. Each point in the description could be refereed to the diagram below\n\n\nStrengths\nClarity\n\np1: Good choice of density plot for understanding the distribution of data.\np2: Additional boxplot adds depth to reveal the relationships between variables.\np3: Inclusion of guidelines (e.g., mean) provides additional information for interpreting and comparing across subjects.\n\nAesthetic\n\np4: Effective use of lighter-colored gridlines, maintaining a clear hierarchy of information, and consistent application of color, style, font size, etc.\n\n\n\nAreas for Improvement\nClarity\n\np1: The title is overly broad and fails to convey the specific focus or key findings of the analysis.\np2: Explore opportunities to better understand the relationship between gender and different subjects.\np3: Provide labels for the guidelines to enhance clarity.\np4: Absence of outliers for completeness.\n\nAesthetic\n\np5: Distinguish between male and female data points by using different colors to improve visual differentiation.\n\n\n\nSketch\n\nimprovements based on the above points mentioned earlier:\n\np1: Main title should be centered to better balance the visual layout. Additionally, the title use to highlight key information in the chart\np2: Combine different subjects into one chart, sharing the same y-axis to reveal the distribution among different subjects simultaneously.\np3: Add additional points or labels to highlight the mean value for better clarity.\np4: Address the issue of outliers in the chart.\np5: Use different colors to differentiate between male and female data points for better visual distinction.\n\n\n\nMake Over\n\n\nShow the code\nmath_gender &lt;- ggplot(data= filtered_data,\n       aes(x= GENDER, y= MATH, color = GENDER)) +\n  geom_violin(aes(fill = GENDER), size = 0.6, alpha = 0.3, linewidth = 0) +\n  geom_boxplot(width= 0.4, outlier.colour = \"grey20\", outlier.size = 1, \n               outlier.alpha = 0.3) +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"black\",        \n               size=2) +  \n  coord_cartesian(ylim = c(0,1000)) +\n  scale_color_manual(values=c(\"#c73824\", \"#0477bf\")) +\n  theme_fivethirtyeight() +\n  labs(title=\"Mathematics\") +\n  scale_y_continuous(breaks = seq(0, 1000, by = 200)) +\n  theme(axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        plot.title=element_text(size= 12, hjust= 0.5),\n        axis.text = element_text(size= 10),\n        legend.position = \"none\") \n\nread_gender &lt;- ggplot(data= filtered_data,\n       aes(x= GENDER, y= READ, color = GENDER)) +\n  geom_violin(aes(fill = GENDER), size = 0.6, alpha = 0.3, linewidth = 0) +\n  geom_boxplot(width= 0.4, outlier.colour = \"grey20\", outlier.size = 1, \n               outlier.alpha = 0.3) +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"black\",        \n               size=2) +  \n  coord_cartesian(ylim = c(0,1000)) +\n  scale_color_manual(values=c(\"#c73824\", \"#0477bf\")) +\n  theme_fivethirtyeight() +\n  labs(title=\"Reading\") + \n  scale_y_continuous(breaks = seq(0, 1000, by = 200)) + \n  theme(axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        plot.title=element_text(size= 12, hjust= 0.5),\n        axis.text = element_text(size= 10),\n        legend.position = \"none\") \n\nsci_gender &lt;- ggplot(data= filtered_data,\n       aes(x= GENDER, y= SCIENCE, color = GENDER)) +\n  geom_violin(aes(fill = GENDER), size = 0.6, alpha = 0.3, linewidth = 0) +\n  geom_boxplot(width= 0.4, outlier.colour = \"grey20\", outlier.size = 1, \n               outlier.alpha = 0.3) +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"black\",        \n               size=2) +  \n  coord_cartesian(ylim = c(0,1000)) +\n  scale_color_manual(values=c(\"#c73824\", \"#0477bf\")) +\n  theme_fivethirtyeight() +\n  labs(title=\"Science\") +\n  scale_y_continuous(breaks = seq(0, 1000, by = 200)) + \n  theme(axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        plot.title=element_text(size= 12, hjust= 0.5),\n        axis.text = element_text(size= 10),\n        legend.position = \"none\") \n\np2 &lt;- (math_gender + read_gender + sci_gender) +\n    plot_annotation(title= \"Performance by Gender Across Subjects\",\n                    theme = theme_fivethirtyeight() +\n                      theme(plot.title = element_text(size = 15, hjust = 0.5)\n                      )\n    )\n\np2"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "version updated: 22 Jan 3PM, fixed the error of EDA4 Description was not pushed to Git properly.\nversion updated: 22 Jan 7PM, included EDA5 and Appendix."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data",
    "title": "Take-home Exercise 1",
    "section": "Data",
    "text": "Data\nThe 2022 Programme for International Student Assessment (PISA) data, released on December 5, 2022, assesses global education systems by testing 15-year-olds in mathematics, reading, and science. The PISA 2022 database includes responses from students, schools, and parents across five data files, primarily in SAS and SPSS formats. This assignment, will only focus on the Student Questionnaire Data File. Additional resources like codebooks, and the PISA 2022 Technical Report are also used as supplementary materials to understand the dataset."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#project-task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#project-task",
    "title": "Take-home Exercise 1",
    "section": "Project Task",
    "text": "Project Task\nIn this take-home exercise, 5 EDA visualisations will be used to understand:\n\nthe distribution of Singapore students’ performance in mathematics, reading, and science,\nthe relationship between these performances with schools, gender and socioeconomic status of the students."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-r-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-r-packages",
    "title": "Take-home Exercise 1",
    "section": "Loading R packages",
    "text": "Loading R packages\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               ggdist, ggridges,\n               colorspace,ggstatsplot, \n               tidyverse)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-filtered-pisa-data-for-sg-students",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-filtered-pisa-data-for-sg-students",
    "title": "Take-home Exercise 1",
    "section": "Importing filtered PISA data for SG students",
    "text": "Importing filtered PISA data for SG students\nThe code chunk below uses read_rds() to import PISA SG data into R environment.\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary-statistics-of-stu_qqq_sg",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary-statistics-of-stu_qqq_sg",
    "title": "Take-home Exercise 1",
    "section": "Summary Statistics of stu_qqq_SG",
    "text": "Summary Statistics of stu_qqq_SG\n\nDataframe DimensionColumn AttributesData Health\n\n\nthe code below use dim() to check the dataframe dimension\n\ndim(stu_qqq_SG)\n\n[1] 6606 1279\n\n\nThe PISA dataset comprises 6606 observations, with 1279 variables. Displaying a sample using standard functions like head() is not feasible due to the sheer number of columns. Similarly, including all columns in the analysis would be impractical.\nA more effective approach involves a thorough understanding of the dataset’s fields, enabling the selection of relevant variables that are crucial to the analysis.\n\n\nTo understand the structure and content available of the columns in the stu_qqq_SG dataframe, the code below retrieve the attributes of the first three columns\n\nlapply(stu_qqq_SG, attributes)[0:3]\n\n$CNT\n$CNT$label\n[1] \"Country code 3-character\"\n\n\n$CNTRYID\n$CNTRYID$label\n[1] \"Country Identifier\"\n\n\n$CNTSCHID\n$CNTSCHID$label\n[1] \"Intl. School ID\"\n\n\nThe dataframe includes label which can be served as column descriptions, with this, making it easier to identify columns which are more relevant to the analysis.\n\n\nthe code below use anyDuplicated() to check if any duplicated entries in the dataset.\n\nanyDuplicated(stu_qqq_SG)\n\n[1] 0\n\n\nthe code use is.na() to check for total number of missing entries in the dataset.\n\nsum(is.na(stu_qqq_SG))\n\n[1] 4168500\n\n\nAll observations are unique. But a huge number of missing values are found in the given data frame. This suggests that another potential approach to handle this dataset is to eliminate columns with a high percentage of missing values.\n\n\n\n\n\n\nNote\n\n\n\naccording to PISA, it was suggested that cases with fewer than three valid responses received score “99”, indicating a missing scale score due to insufficient responses. This value should be considered as missing values and filtered out if existed in the data set used later."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#understanding-the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#understanding-the-data",
    "title": "Take-home Exercise 1",
    "section": "Understanding the Data",
    "text": "Understanding the Data\nGiven the challenge in understanding the labels under each column attributes, which act as column descriptors, and the cumbersome process of examining them one by one, creating a data schema table is a more efficient approach for facilitating in-depth analysis\n\nData Schema OverviewSchema Distribution Insights\n\n\nThe code chunk below uses tibble() to create a data frame. This data frame summarizes essential attributes of each column in the 'stu_qqq_SG', such as column descriptions, the number of missing values, and the count of unique values. The first five rows are displayed for a preliminary understanding of the data structure.\n\n\nShow the code\ndata_schema &lt;- tibble(\n  column_name = names(stu_qqq_SG),\n  description = sapply(stu_qqq_SG, function(col) {\n    lbl &lt;- attr(col, \"label\")\n    if(is.null(lbl)) \"\" else lbl # If label is null, return an empty string\n  }),\n  data_type = sapply(stu_qqq_SG, class),\n  num_missing_values = sapply(stu_qqq_SG, function(col) {\n    sum(is.na(col)) # Calculates the number of NA values in the column\n  }),\n  num_unique_values = sapply(stu_qqq_SG, function(col) {\n    length(unique(col)) # Calculates the number of unique values in the column\n  })\n)\n\nhead(data_schema, 5)\n\n\n# A tibble: 5 × 5\n  column_name description         data_type num_missing_values num_unique_values\n  &lt;chr&gt;       &lt;chr&gt;               &lt;chr&gt;                  &lt;int&gt;             &lt;int&gt;\n1 CNT         Country code 3-cha… character                  0                 1\n2 CNTRYID     Country Identifier  numeric                    0                 1\n3 CNTSCHID    Intl. School ID     numeric                    0               164\n4 CNTSTUID    Intl. Student ID    numeric                    0              6606\n5 CYC         PISA Assessment Cy… character                  0                 1\n\n\n\n\nTo delve into the data schema’s specifics, summary() is used to examine the overall distribution of unique and missing values across the dataset. This step is crucial for understanding the original data’s structure and determining the data’s health and integrity.\n\n\nShow the code\nsummary(data_schema)\n\n\n column_name        description         data_type         num_missing_values\n Length:1279        Length:1279        Length:1279        Min.   :   0.0    \n Class :character   Class :character   Class :character   1st Qu.:  69.5    \n Mode  :character   Mode  :character   Mode  :character   Median :3294.0    \n                                                          Mean   :3259.2    \n                                                          3rd Qu.:6606.0    \n                                                          Max.   :6606.0    \n num_unique_values\n Min.   :   1.0   \n 1st Qu.:   1.0   \n Median :   5.0   \n Mean   : 711.3   \n 3rd Qu.:   7.0   \n Max.   :6606.0   \n\n\nThe summary indicates that over 25% of the columns are filled with missing values, and over 25% contain only one unique value. As previously noted, such columns with uniform data may not contribute meaningful insights and could be considered for exclusion to streamline the analysis process.\n\n\n\n\nColumn Description\nA detailed examination of the column descriptions, along with the questionnaire details provided on the technical report reveals the data schema of the 'stu_qqq_SG' dataframe. The following diagram illustrates the data structure:\n\n\n\n\nflowchart TD\nstyle A fill:#000000,color:#ffffff\nstyle B fill:#c73824,color:#ffffff\nstyle H fill:#c73824,color:#ffffff\nstyle I fill:#c73824,color:#ffffff\nA(stu_qqq_SG) --&gt; B(STxxx)\nA --&gt; C(ICxxx)\nA --&gt; D(FLxxx)\nA --&gt; E(WBxxx)\nA --&gt; F(PAxxx)\nA --&gt; G(Wxxx)\nA --&gt; H(PVxxx)\nA --&gt; I(Others)\n\n\n\n\n\n\nThe dataset provides the information of following:\n\nST: Student Questionnaire, including student demographics and Economic, Social, and Cultural Status (ESCS) information. Further details can be found in Annex 5.A of the technical report.\nIC: Information Communication Technology Questionnaire (ICTQ).\nFL: Financial Literacy Questionnaire (FLQ).\nWB: Well-being Questionnaire (WBQ).\nPA: Parent Questionnaire (PaQ).\nW: Final trimmed nonresponse adjusted student weight.\nPV: Plausible Values representing student performance.\nOthers: This includes basic student information and derived variables like the ESCS index. Details of all field could be found under the technical reports\n\nFor this exercise, which focuses on the performance distribution of Singapore students in mathematics, reading, and science, and their correlation with school type, gender, and socioeconomic status, the ST, PV, and Others categories are particularly pertinent. A deeper dive into these fields is available in the subsequent chapter."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#dive-into-relevant-information",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#dive-into-relevant-information",
    "title": "Take-home Exercise 1",
    "section": "Dive into Relevant Information",
    "text": "Dive into Relevant Information\n\nPerformance in Mathematics, Reading, and Science\nThe dataset organizes Plausible Values (PVs) across subjects: Mathematics, Reading, and Science. Mathematics, for instance, is subdivided into specific topics representing various mathematical competencies.\n\n\n\n\nflowchart LR\nstyle A fill:#000000,color:#ffffff\nstyle B fill:#c73824,color:#ffffff\nstyle C fill:#c73824,color:#ffffff\nstyle D fill:#c73824,color:#ffffff\nA(PV) --&gt; B(Maths)\nA --&gt; C(Reading)\nA --- D(Science)\nB --- E(Change and Relationships)\nB --- F(Quantity)\nB --- G(Space and Shape)\nB --- H(Uncertainty and Data)\nB --- I(Employing Mathematical Concepts, Facts, and Procedures)\nB --- J(Formulating Situations Mathematically)\nB--- K(Interpreting, Applying, and Evaluating Mathematical Outcomes)\nB --- L(Reasoning)\n\n\n\n\n\nFor a balanced analysis of student performance across subjects, it’s crucial to maintain a consistent level of detail. Each PV score comprises 10 distinct values, reflecting various potential levels of student performance. Therefore, determining the appropriate level of aggregation is essential for an unbiased and comprehensive analysis.\n\nAggregation of PV ScoresUsing PISA methodData Manipulation\n\n\nSelecting a single PV simplifies analysis but may underestimate standard errors and ignoring the variability. PISA analysts note that in large samples, the choice between one and multiple PVs may not significantly alter results.\nAnother approach is to calculate the average PV score for each student in a given subject to represent their overall performance. However, as noted in this literature, this method can severely underestimate standard errors, especially if only a single PV is used.\n\n\nShow the code\n# Selecting the relevant data\nselected_data &lt;- stu_qqq_SG %&gt;% \n  select(CNTSTUID, PV1MATH, PV2MATH, PV3MATH, PV4MATH, PV5MATH, PV6MATH, PV7MATH, PV8MATH, PV9MATH, PV10MATH)\n\n# Calculate the average PV score for each student\nselected_data &lt;- selected_data %&gt;%\n  mutate(AVG_MATH = rowMeans(select(., starts_with(\"PV\")), na.rm = TRUE))\n\n# Reshape the data to long format including the average\nmath_PV &lt;- selected_data %&gt;% \n  pivot_longer(cols = -CNTSTUID, names_to = \"PV_math\", values_to = \"score\")\n\n# Create a custom order for the plot\nmath_PV$PV_math &lt;- factor(math_PV$PV_math, levels = c(\"PV1MATH\", \"PV2MATH\", \"PV3MATH\", \"PV4MATH\", \"PV5MATH\", \n                                                      \"PV6MATH\", \"PV7MATH\", \"PV8MATH\", \"PV9MATH\", \"PV10MATH\", \"AVG_MATH\"))\n\n# Plot the boxplot with custom order and refined theme settings\nggplot(math_PV, aes(x = PV_math, y = score)) + \n  geom_boxplot() + \n  theme_minimal() +\n  labs(title = \"Boxplot of Math Scores for Each Plausible Value and Average\", \n       x = \"Math Performance\", \n       ) +\n  scale_x_discrete(labels = c(\"PV1\", \"PV2\", \"PV3\", \"PV4\", \"PV5\", \"PV6\", \"PV7\", \"PV8\", \"PV9\", \"PV10\", \"Average\")) +\n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5),\n        axis.title.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.ticks.x = element_line(),      \n        axis.line.x = element_line())\n\n\n\n\n\nThe boxplot demonstrates that students’ performances vary across the different Plausible Values (PVs) in mathematics, suggesting that a single PV may not fully capture an individual’s skillset. Averaging the scores provides a generalized view to identify broad patterns and trends. Additionally, calculating the variance of PVs for each student offers insights into their performance stability across different mathematical competencies.\n\n\nalternatively, under How to prepare and analyse the PISA database, a step by step instruction is illustrated as below:\n\nthe code chunk below compare the difference of using PISA and aggregation method in a historgam to illustrate the distribution\n\n\nShow the code\nall_PVs &lt;- pivot_longer(selected_data, cols = starts_with(\"PV\"), names_to = \"PV\", values_to = \"score\")\n\nggplot() +\n  geom_density(data = all_PVs, aes(x = score, fill = \"PISA Method\"), color = \"grey90\", fill = \"grey90\") + \n  geom_density(data = selected_data, aes(x = AVG_MATH, linetype = \"Agg Method\"), color = \"#c73824\", size = 0.8, linetype = \"dotted\") +\n  labs(title = \"Density Plot of PV Math Scores for SG Students\", x = \"Score\", y = \"Density\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.text.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_blank(),\n    axis.ticks.x = element_line(),\n    axis.line.x = element_line(),\n    legend.position = \"right\",\n    legend.title = element_text(size = 8),\n    legend.text = element_text(size = 8)\n  ) +\n  guides(fill = guide_legend(title = \"Legend\"), linetype = guide_legend(title = \"Legend\"))\n\n\n\n\n\nThe density plot provides a visual comparison between the detailed PISA method(in grey shde) and the simplified aggregate(in red dotted line) approach. Although the PISA method offers a comprehensive view, capturing the full spectrum of data, its expansive range may not significantly enhance the understanding of general subject performance.\nThis plot reveals that the PISA method, while meticulous, may add unnecessary complexity to the overall evaluation of student performance. Unless the analysis aims to investigate specific patterns within the PVs, the broader range of the histogram does not contribute additional insights into the overarching trends.\n\n\nIn summary, averaging PVs provides a snapshot of general student performance, revealing dominant trends and serving as a foundation for further detailed analysis. The inclusion of variance calculations adds depth by assessing the balance and consistency of individual performances.\nThe code chunk below created new aggregated columns for PV values.\n\nstu_qqq_SG &lt;- stu_qqq_SG %&gt;%\n  mutate(\n    PV_avg_math = rowMeans(select(., starts_with(\"PV\") & ends_with(\"MATH\")), na.rm = TRUE),\n    PV_var_math = apply(select(., starts_with(\"PV\") & ends_with(\"MATH\")), 1, var, na.rm = TRUE),\n    PV_avg_read = rowMeans(select(., starts_with(\"PV\") & ends_with(\"READ\")), na.rm = TRUE),\n    PV_var_read = apply(select(., starts_with(\"PV\") & ends_with(\"READ\")), 1, var, na.rm = TRUE),\n    PV_avg_scie = rowMeans(select(., starts_with(\"PV\") & ends_with(\"SCIE\")), na.rm = TRUE),\n    PV_var_scie = apply(select(., starts_with(\"PV\") & ends_with(\"SCIE\")), 1, var, na.rm = TRUE)\n  )\n\nAs the variance value contains extreme values, these data are also binned into ‘low’, ‘lower-mid’, ‘upper-mid’, ‘high’ to indicate students’ performance consistency\n\nstu_qqq_SG &lt;- stu_qqq_SG %&gt;%\n  mutate(\n    consistency_math = cut(\n      PV_var_math,\n      breaks = quantile(PV_var_math, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE),\n      labels = c('high', 'upper-mid', 'lower-mid', 'low'),\n      include.lowest = TRUE\n    ),\n    consistency_read = cut(\n      PV_var_read,\n      breaks = quantile(PV_var_read, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE),\n      labels = c('high', 'upper-mid', 'lower-mid', 'low'),\n      include.lowest = TRUE\n    ),\n    consistency_sci = cut(\n      PV_var_scie,\n      breaks = quantile(PV_var_scie, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE),\n      labels = c('high', 'upper-mid', 'lower-mid', 'low'),\n      include.lowest = TRUE\n    )\n  )\n\n\n\n\n\n\nSchools\nBased on the documentation and column distribution, 3 columns listed below brought my attention:\n\nCNTSCHID: Intl. School ID\nPROGN: Unique national study programme code\nPQSCHOOL: School quality (WLE)\n\n\nData SummaryData QualityData Distribution - PROGNData Distribution - CNTSCHID\n\n\nThe code below use filter() to select relevant columns from the data schema\n\ndata_schema %&gt;%\n  filter(column_name %in% c('CNTSCHID', 'PROGN', 'PQSCHOOL'))\n\n# A tibble: 3 × 5\n  column_name description         data_type num_missing_values num_unique_values\n  &lt;chr&gt;       &lt;chr&gt;               &lt;chr&gt;                  &lt;int&gt;             &lt;int&gt;\n1 CNTSCHID    Intl. School ID     numeric                    0               164\n2 PROGN       Unique national st… character                  0                 2\n3 PQSCHOOL    School quality (WL… numeric                 6606                 1\n\n\nPQSCHOOL intended to represent the quality of schools as evaluated by parents, as indicated in the technical report chapter 19. However, it’s worth noting that for the Singapore dataset, all values are missing. This suggests that this question was not included in the context of Singapore.\nPROGN reveals the presence of two unique programs in the dataset. A closer investigation, based on the codebook provided, indicates that these two values represent different levels of education. This distinction could introduce bias when comparing lower and upper secondary education. Therefore, further investigation is required to understand the distribution of these values and decide whether to analyze the two groups separately.\n\n07020001: Singapore : Lower Secondary education\n07020001: Singapore : Upper Secondary education\n\nAlternatively, CNTSCHID provides a unique index for different school IDs. None of the value is missing, and there are 164 unique entries for this column.\n\n\nThe code chunk below converts this column into a factor which better represents the categories rather than quantitative values\n\nstu_qqq_SG$CNTSCHID &lt;- factor(stu_qqq_SG$CNTSCHID)\n\n\n\nThe code below calculates the distribution of the two different programs surveyed in the dataset. Notably, we observed that 07020001, which represents Lower Secondary Education, comprises only 72 entries, approximately 1% of the total dataset. Given this small proportion, dropping this data may be a prudent choice to avoid biases stemming from the differing levels of education surveyed.\n\nstu_qqq_SG %&gt;%\n  count(PROGN) %&gt;%\n  mutate(Percentage = n / sum(n) * 100)\n\n# A tibble: 2 × 3\n  PROGN        n Percentage\n  &lt;chr&gt;    &lt;int&gt;      &lt;dbl&gt;\n1 07020001    72       1.09\n2 07020002  6534      98.9 \n\n\nthe code chunk below is to retain only the records related to Upper Secondary Education (where PROGN == \"07020002\")\n\nstu_qqq_SG_filtered &lt;- stu_qqq_SG %&gt;%\n  filter(PROGN == \"07020002\")\n\n\n\nThe CNTSCHID column contains 168 unique values, indicating the participation of 168 different schools in the exercise. However, without further information on school types or educational quality, it’s challenging to draw conclusions solely from this data. To gain insight into the source of the students and the distribution of the number of students from each school, we group the dataset by school ID (CNTSCHID) and calculate the student count per school. This is then visualized with a box plot, showing the number of students per school.\n\n\nShow the code\nstudent_count_per_school &lt;- stu_qqq_SG_filtered %&gt;%\n  group_by(CNTSCHID) %&gt;%\n  summarise(NumberOfStudents = n())\n\nggplot(student_count_per_school, aes(x = NumberOfStudents)) +\n  stat_dots(side = \"top\",\n            justification = 1.5,\n            binwidth = 0.8,\n            dotsize = 0.8) + \n  geom_boxplot(width = 0.20, position = position_nudge(y = 0.1)) +  \n  scale_x_continuous(labels = scales::label_comma(),  # Format labels with commas\n                     breaks = seq(0, max(student_count_per_school$NumberOfStudents)+5, by = 5), \n                     limits = c(0, max(student_count_per_school$NumberOfStudents)+5), expand = c(0, 0)) +  \n  labs(title = \"Distribution of Student Number from Each Surveyed School\", x = \"Number of Students/School\") + \n  theme_minimal() +\n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5),\n        axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.grid.major = element_blank(),  \n        panel.grid.minor = element_blank(),\n        axis.ticks.x = element_line(),      \n        axis.line.x = element_line()) \n\n\n\n\n\n\n\n\n\n\nGender\nBased on the documentation and column distribution, ST004D01T represents Student (Standardized) Gender.\n\nData SummaryData QualityData Distribution\n\n\nThe code chunk below checks the summary of the column in the dataset. This data is currently in numeric, and need to be adjusted as categorical, as 1 and 2 indicates the index of the gender.\n\ndata_schema %&gt;%\n  filter(column_name %in% c('ST004D01T'))\n\n# A tibble: 1 × 5\n  column_name description         data_type num_missing_values num_unique_values\n  &lt;chr&gt;       &lt;chr&gt;               &lt;chr&gt;                  &lt;int&gt;             &lt;int&gt;\n1 ST004D01T   Student (Standardi… numeric                    0                 2\n\n\nThere are no missing entries in this column, and it contains two unique values representing gender categories.\n\n\nThe code chunk below converts this column into a factor which better represents the categories (like gender) rather than quantitative values\n\nstu_qqq_SG_filtered$ST004D01T &lt;- factor(stu_qqq_SG_filtered$ST004D01T)\n\n\n\nThe code chunk below give an initial distribution to understand the number of students in each gender participating in the survey\n\n\nShow the code\nggplot(stu_qqq_SG_filtered, aes(x = ST004D01T)) +\n  geom_bar(fill = \"grey80\", alpha = 0.75, width = 0.5) +\n  geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5) + \n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    panel.grid.major = element_blank(),  # Remove major grid lines\n    panel.grid.minor = element_blank(),  # Remove minor grid lines\n    axis.title.y = element_blank(),  # Remove y-axis title\n    axis.text.y = element_blank(),  # Remove y-axis text (labels)\n    axis.ticks.y = element_blank(),  # Remove y-axis ticks\n    axis.ticks.x = element_line(),      \n    axis.line.x = element_line() \n  ) +\n  labs(title = \"Number of Students by Gender\", x = \"Gender Index\", y = \"\")\n\n\n\n\n\nThere are 3248 students in gender category 1 and 3358 students in gender category 2. The sample size is substantial, allowing for generalization. Additionally, the sample population exhibits a balanced distribution between both genders, enabling a fair and comprehensive analysis with equal representation.\n\n\n\n\n\nSocioeconomic Status\nIn the Student Questionnaire, there are several questions labeled as STxxx, which pertain to the Economic, Social, and Cultural Status (ESCS) section, as outlined in Annex 5.A of the technical report. Additionally, there is a distinct column labeled ESCS, described as an index representing economic, social, and cultural status.\nThis composite ESCS index, as illustrated in chapter 19 of the technical report, is derived from the responses in the Student Questionnaire. It serves as a comprehensive composite value, encompassing various influencing factors. Consequently, this ESCS index should be utilized for analytical purposes.\n\n\nData SummaryData QualityData DistributionData Manipulation\n\n\nThe code below use filter() to select relevant columns from the data schema\n\ndata_schema %&gt;%\n  filter(column_name %in% c('ESCS'))\n\n# A tibble: 1 × 5\n  column_name description         data_type num_missing_values num_unique_values\n  &lt;chr&gt;       &lt;chr&gt;               &lt;chr&gt;                  &lt;int&gt;             &lt;int&gt;\n1 ESCS        Index of economic,… numeric                   47              5815\n\n\nThe code chunk below use head() to visulize the first few values of ESCS\n\nhead(stu_qqq_SG_filtered$ESCS)\n\n[1]  0.1836  0.8261 -1.0357 -0.9606  0.0856  0.1268\n\n\nThe ESCS contains an index which is a numeric value indicating the economic, social and cultural status using both positive and negative floats.\n\n\nThere are only 47 missing entries, which account for less than 0.8% of the dataset. Such a small proportion is considered insignificant for analysis, and these data points can be safely dropped in a dataset of this size.\nCode below to calculate the number of missing values and the percentage of missing values\n\nstu_qqq_SG_filtered %&gt;%\n  summarise(MissingCount = sum(is.na(ESCS)),\n            PercentageMissing = (MissingCount / n()) * 100)\n\n# A tibble: 1 × 2\n  MissingCount PercentageMissing\n         &lt;int&gt;             &lt;dbl&gt;\n1           47             0.719\n\n\nThe code chunk below is to select non-missing values for ESCS in the dataset\n\nfiltered_data &lt;- stu_qqq_SG_filtered %&gt;%\n  filter(!is.na(ESCS))\n\n\n\nThe code chunk below display the distribution of ESCS index among surveryed students\n\n\nShow the code\nggplot(filtered_data, aes(x = ESCS)) +\n  geom_density(fill = \"grey90\", alpha = 0.5) +  # Density plot\n  geom_boxplot(width = 0.1) +  # Boxplot\n  theme_minimal() +\n  labs(title = \"Density Plot and Boxplot for ESCS Index Distribution\", x = \"ESCS Index\") +\n  # adjust x-axis label interval\n  scale_x_continuous(breaks = seq(-4, 4, by = 0.5)) +\n  # style\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_blank(), \n    axis.title.y = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_line(),\n    axis.line.x = element_line()\n  )\n\n\n\n\n\nThe density plot, shaded in grey, suggests a roughly normal distribution of ESCS scores, with the majority of data clustering around the center. This is indicated by the bell-shaped curve with its peak at the mean ESCS Index value. Overall, the plot suggests a symmetrical distribution of ESCS Index values, with no significant skewness or outliers.\n\n\nThe column is further binned into lower, lower_mid, upper_mid, and upper as ESCS_bin:\n\nbin_boundaries &lt;- quantile(filtered_data$ESCS, probs = c(0, 0.25, 0.5, 0.75, 1))\nbin_labels &lt;- c(\"lower\", \"lower-mid\", \"upper-min\", \"upper\")\nfiltered_data$ESCS_bin &lt;- cut(filtered_data$ESCS, breaks = bin_boundaries, labels = bin_labels, include.lowest = TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#filtering-dataset",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#filtering-dataset",
    "title": "Take-home Exercise 1",
    "section": "Filtering Dataset",
    "text": "Filtering Dataset\nThe code chunk below used to only include the relevant data fields for analysis. We have intentionally retained all “PVs” (Potential Variables) to ensure their availability should we require a more comprehensive examination in the future.\n\n\nShow the code\npisa_new &lt;- filtered_data %&gt;%\n  select(CNTSTUID, CNTSCHID, ST004D01T, starts_with(\"PV\"), ESCS, ESCS_bin, starts_with('consistency'))\n\n# View the resulting dataframe\nhead(pisa_new,5)\n\n\n# A tibble: 5 × 124\n  CNTSTUID CNTSCHID ST004D01T PV1MATH PV2MATH PV3MATH PV4MATH PV5MATH PV6MATH\n     &lt;dbl&gt; &lt;fct&gt;    &lt;fct&gt;       &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1 70200001 70200052 1            639.    601.    621.    632.    579.    592.\n2 70200002 70200134 2            697.    754.    672.    657.    621.    656.\n3 70200003 70200112 2            694.    654.    697.    646.    678.    644.\n4 70200004 70200004 2            427.    410.    424.    389.    331.    380.\n5 70200005 70200152 1            436.    453.    392.    440.    443.    453.\n# ℹ 115 more variables: PV7MATH &lt;dbl&gt;, PV8MATH &lt;dbl&gt;, PV9MATH &lt;dbl&gt;,\n#   PV10MATH &lt;dbl&gt;, PV1READ &lt;dbl&gt;, PV2READ &lt;dbl&gt;, PV3READ &lt;dbl&gt;, PV4READ &lt;dbl&gt;,\n#   PV5READ &lt;dbl&gt;, PV6READ &lt;dbl&gt;, PV7READ &lt;dbl&gt;, PV8READ &lt;dbl&gt;, PV9READ &lt;dbl&gt;,\n#   PV10READ &lt;dbl&gt;, PV1SCIE &lt;dbl&gt;, PV2SCIE &lt;dbl&gt;, PV3SCIE &lt;dbl&gt;, PV4SCIE &lt;dbl&gt;,\n#   PV5SCIE &lt;dbl&gt;, PV6SCIE &lt;dbl&gt;, PV7SCIE &lt;dbl&gt;, PV8SCIE &lt;dbl&gt;, PV9SCIE &lt;dbl&gt;,\n#   PV10SCIE &lt;dbl&gt;, PV1MCCR &lt;dbl&gt;, PV2MCCR &lt;dbl&gt;, PV3MCCR &lt;dbl&gt;, PV4MCCR &lt;dbl&gt;,\n#   PV5MCCR &lt;dbl&gt;, PV6MCCR &lt;dbl&gt;, PV7MCCR &lt;dbl&gt;, PV8MCCR &lt;dbl&gt;, …\n\n\nThe code below changes the datatype for the unique student ID\n\n\nShow the code\npisa_new$CNTSTUID &lt;- as.factor(pisa_new$CNTSTUID)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-1-distribution-of-singapore-students-performance-in-mathematics-reading-and-science",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-1-distribution-of-singapore-students-performance-in-mathematics-reading-and-science",
    "title": "Take-home Exercise 1",
    "section": "EDA 1: Distribution of Singapore Students’ Performance in mathematics, Reading, and Science",
    "text": "EDA 1: Distribution of Singapore Students’ Performance in mathematics, Reading, and Science\nThe code chunk below creates a histogram to illustrate the distribution of Student Performance across subjects.\n\n\nShow the code\n# Select average columns\npv_avg &lt;- pisa_new %&gt;%\n  select(PV_avg_math, PV_avg_read, PV_avg_scie)\n\n# Reshape the data for plotting\npv_avg &lt;- gather(pv_avg, key = \"Subject\", value = \"Average_Score\")\n\n# Create a labeller function to rename facet titles\ncustom_labeller &lt;- function(variable, value) {\n  if (variable == \"Subject\") {\n    value &lt;- case_when(\n      value == \"PV_avg_math\" ~ \"Math\",\n      value == \"PV_avg_read\" ~ \"Read\",\n      value == \"PV_avg_scie\" ~ \"Science\",\n      TRUE ~ as.character(value)\n    )\n  }\n  return(value)\n}\n\navg_dist &lt;- ggplot(pv_avg, \n       aes(x = Average_Score, fill = Subject)) +\n  geom_histogram(bins = 25, boundary = 5, color = \"white\", fill = \"grey80\") +\n  geom_boxplot(width = 50, outlier.size = 0.2, outlier.color = \"#c73824\", position = position_dodge(width = 0.75), fill = \"white\", color = \"black\") +\n  labs(title = \"Distribution of Performance among Subjects\", x = \"Average Score\", y = \"Frequency\") +\n  theme_minimal() +\n  facet_wrap(~ Subject, scales = \"free\", nrow = 3, label = custom_labeller) + \n  theme(\n    strip.text = element_text(size = 12, face = \"bold\")\n  ) +\n  coord_cartesian(xlim = c(200, 800), ylim = c(0, 800)) +  # Set x and y limits\n  geom_vline(data = pv_avg %&gt;%\n               group_by(Subject) %&gt;%\n               summarize(mean_score = mean(Average_Score), median_score = median(Average_Score)),\n             aes(xintercept = mean_score), color = \"#c73824\", linetype = \"dashed\") +  # Add mean vertical lines\n  geom_text(data = pv_avg %&gt;%\n               group_by(Subject) %&gt;%\n               summarize(mean_score = mean(Average_Score), median_score = median(Average_Score)),\n             aes(x = mean_score - 50, y = Inf, label = paste(\"Mean:\", round(mean_score, 2))), color = \"#c73824\", vjust = 1, size = 3) +  \n  geom_vline(data = pv_avg %&gt;%\n               group_by(Subject) %&gt;%\n               summarize(mean_score = mean(Average_Score), median_score = median(Average_Score)),\n             aes(xintercept = median_score), color = \"#0477bf\", linetype = \"dashed\") +  # Add median vertical lines\n  geom_text(data = pv_avg %&gt;%\n               group_by(Subject) %&gt;%\n               summarize(mean_score = mean(Average_Score), median_score = median(Average_Score)),\n             aes(x = median_score + 50, y = Inf, label = paste(\"Median:\", round(median_score, 2))), color = \"#0477bf\", vjust = 1, size = 3) +  \n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(), \n    axis.title.y = element_blank(),\n    axis.ticks.x = element_line(color = \"grey\"),  \n    axis.line.x = element_line(color = \"grey\")\n    )    \n\n# avg_dist\n\n\nThe code chunk below creates a density plot to illustrate the distribution of Performance Consistency among Subject.\n\n\nShow the code\n# Select var columns\npv_var &lt;- pisa_new %&gt;%\n  select(Math = PV_var_math, Science = PV_var_scie, Read = PV_var_read)\npv_var &lt;- gather(pv_var, key = \"Subject\", value = \"Score_Variance\")\nvar_dist &lt;- ggplot(pv_var, aes(x = Score_Variance, fill = Subject)) +\n  geom_density(alpha = 0.2, color = \"white\", size = 0.3) +  \n  labs(title = \"Distribution of Performance Consistency among Subjects\", x = \"Variance\") +  \n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_blank(), \n    axis.title.y = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_line(color = \"grey\"),  \n    axis.line.x = element_line(color = \"grey\")\n  ) +\n  scale_x_continuous(limits = c(0, 6000))  # Adjust x-axis limits\n# var_dist\n\n\nThe code chunk below creates a heatmap to illustrate the relationship between students preformance in different subjects.\n\n\nShow the code\n# Select variables of interest and rename them\nselected_vars &lt;- pisa_new %&gt;%\n  select(PV_avg_math, PV_avg_read, PV_avg_scie, PV_var_math, PV_var_read, PV_var_scie) %&gt;%\n  rename(\n    \"Math Avg\" = PV_avg_math,\n    \"Read Avg\" = PV_avg_read,\n    \"Science Avg\" = PV_avg_scie,\n    \"Math Variance\" = PV_var_math,\n    \"Read Variance\" = PV_var_read,\n    \"Science Variance\" = PV_var_scie\n  )\n\n# Create the correlogram\ncorrelogram &lt;- ggcorrmat(\n  data = selected_vars,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title = \"Correlogram for Student Performance\",\n  subtitle = \"Subject Performance is relatively related in a linear manner\"\n)\n\n# Display the correlogram\n# correlogram\n\n\nThe code chunk below patch all the plots together in 1 plot.\n\n\nShow the code\nplot1 &lt;- avg_dist\nplot3 &lt;- var_dist\nplot2 &lt;- correlogram\n\npatchwork &lt;- (plot1 | (plot3 / plot2))\npatchwork &lt;- patchwork +\n  plot_annotation(title = \"Distribution of Singapore Students Performance in Mathematics, Reading, and Science\", \n                  theme = theme(plot.title = element_text(size = 18, face = \"bold\", hjust = 0.5)))\n\npatchwork\n\n\n\n\n\nThe visualizations present an overview of the performance distribution of Singapore students in mathematics, reading, and science.\n\nSG students preforms better in Maths and Science compared to readings in general, with a higher mean, median, and along with a more prominent upper quartile boxplots.\nA slightly left-skewed distribution observed for math, but nearly symmetric for reading and science. This suggests that while students generally perform well, a significant number excel in math compared to the other subjects.\nReading, however, shows more outliers on the lower end, implying a struggle among a notable group of students\nThe variance in reading scores is the most pronounced, indicating inconsistent performance within the subject, hinting at possible disparities in students’ abilities to tackle different reading materials or question types. This variability could result in a wider spread of scores, influencing the overall lower mean in reading.\nIn contrast, the lower variance in mathematics and science suggests more uniform achievement, pointing towards consistent individual performance in these subjects.\nThe correlogram reinforces the interconnection between subjects, with math and science exhibiting a particularly strong positive correlation. However, the relationship between individual consistency (variance) and overall grades is not immediately apparent, suggesting that high variance in subject performance does not necessarily correlate with lower overall grades or the opposite."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-2-relationship-between-performances-with-gender",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-2-relationship-between-performances-with-gender",
    "title": "Take-home Exercise 1",
    "section": "EDA 2: Relationship between Performances with Gender",
    "text": "EDA 2: Relationship between Performances with Gender\nThe code chunk below use a Half Eye graph and Boxplot to understand the SG students maths performance by gender.\n\n\nShow the code\npv_gender &lt;- pisa_new %&gt;%\n  select(Math = PV_avg_math, Science = PV_avg_scie, Reading = PV_avg_read, Gender = ST004D01T, consistency_math, consistency_read, consistency_sci)\n\npv_math_gender &lt;- ggplot(pv_gender, \n       aes(y = Gender, \n           x = Math)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               height = 0.75) +\n  geom_boxplot(width = .2,\n               outlier.shape = NA) + \n  theme_minimal() +\n  labs(title = \"Distribution of Students' Maths Performance by Gender\", x = \"average PV\") +\n  theme_minimal() +\n  theme(legend.title = element_blank(),\n        plot.title = element_text(face = \"bold\", hjust = 0.5),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.y = element_blank(), \n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_line(color = \"grey\"),  \n    axis.line.x = element_line(color = \"grey\"))\n\n# Calculate mean and median\nmean_math &lt;- mean(pv_gender$Math, na.rm = TRUE)\nmedian_math &lt;- median(pv_gender$Math, na.rm = TRUE)\n\n# Add vertical lines for mean and median and label them with shifted text\npv_math_gender &lt;- pv_math_gender +\n  geom_vline(xintercept = mean_math, color = \"#c73824\", linetype = \"dashed\") +\n  geom_vline(xintercept = median_math, color = \"#0477bf\", linetype = \"dashed\") +\n  annotate(\"text\", x = mean_math - 70, y = Inf, vjust = 1, label = paste(\"Mean =\", round(mean_math, 2)), color = \"#c73824\") +\n  annotate(\"text\", x = median_math + 70, y = Inf, vjust = 1, label = paste(\"Median =\", round(median_math, 2)), color = \"#0477bf\")\n\n# pv_math_gender\n\n\nThe code chunk below use a Half Eye graph and Boxplot to understand the SG students science performance by gender.\n\n\nShow the code\npv_sci_gender &lt;- ggplot(pv_gender, \n       aes(y = Gender, \n           x = Science)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               height = 0.75) +\n  geom_boxplot(width = .2,\n               outlier.shape = NA) + \n  theme_minimal() +\n  labs(title = \"Distribution of Students' Science Performance by Gender\", x = \"average PV\") +\n  theme_minimal() +\n  theme(legend.title = element_blank(),\n        plot.title = element_text(face = \"bold\", hjust = 0.5),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.y = element_blank(), \n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_line(color = \"grey\"),  \n    axis.line.x = element_line(color = \"grey\"))\n\n# Calculate mean and median\nmean_sci &lt;- mean(pv_gender$Science, na.rm = TRUE)\nmedian_sci &lt;- median(pv_gender$Science, na.rm = TRUE)\n\n# Add vertical lines for mean and median and label them with shifted text\npv_sci_gender &lt;- pv_sci_gender +\n  geom_vline(xintercept = mean_sci, color = \"#c73824\", linetype = \"dashed\") +\n  geom_vline(xintercept = median_sci, color = \"#0477bf\", linetype = \"dashed\") +\n  annotate(\"text\", x = mean_sci - 70, y = Inf, vjust = 1, label = paste(\"Mean =\", round(mean_sci, 2)), color = \"#c73824\") +\n  annotate(\"text\", x = median_sci + 70, y = Inf, vjust = 1, label = paste(\"Median =\", round(median_sci, 2)), color = \"#0477bf\")\n\n# pv_sci_gender\n\n\nThe code chunk below use a Half Eye graph and Boxplot to understand the SG students reading performance by gender.\n\n\nShow the code\npv_read_gender &lt;- ggplot(pv_gender, \n       aes(y = Gender, \n           x = Reading)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               height = 0.75) +\n  geom_boxplot(width = .2,\n               outlier.shape = NA) + \n  theme_minimal() +\n  labs(title = \"Distribution of Students' Reading Performance by Gender\", x = \"average PV\") +\n  theme_minimal() +\n  theme(legend.title = element_blank(),\n        plot.title = element_text(face = \"bold\", hjust = 0.5),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.y = element_blank(), \n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_line(color = \"grey\"),  \n    axis.line.x = element_line(color = \"grey\"))\n\n# Calculate mean and median\nmean_read &lt;- mean(pv_gender$Reading, na.rm = TRUE)\nmedian_read &lt;- median(pv_gender$Reading, na.rm = TRUE)\n\n# Add vertical lines for mean and median and label them with shifted text\npv_read_gender &lt;- pv_read_gender +\n  geom_vline(xintercept = mean_read, color = \"#c73824\", linetype = \"dashed\") +\n  geom_vline(xintercept = median_read, color = \"#0477bf\", linetype = \"dashed\") +\n  annotate(\"text\", x = mean_read - 70, y = Inf, vjust = 1, label = paste(\"Mean =\", round(mean_read, 2)), color = \"#c73824\") +\n  annotate(\"text\", x = median_read + 70, y = Inf, vjust = 1, label = paste(\"Median =\", round(median_read, 2)), color = \"#0477bf\")\n\n# pv_read_gender\n\n\nThe code chunk below shows mapped out the % of students coming from each performance consistency level for all subjects and gender.\n\n\nShow the code\n# Define a custom blue color palette\nblue_palette &lt;- c(\"#ccece6\", \"#99d8c9\", \"#66c2a4\", \"#238b45\")\n\n# Reshape the data into long format for consistency categories and calculate percentages\npv_gender_long &lt;- pv_gender %&gt;%\n  pivot_longer(\n    cols = c(consistency_math, consistency_read, consistency_sci),\n    names_to = \"Subject_Consistency\",\n    values_to = \"Consistency\"\n  ) %&gt;%\n  mutate(Subject = case_when(\n    grepl(\"math\", Subject_Consistency) ~ \"Math\",\n    grepl(\"read\", Subject_Consistency) ~ \"Reading\",\n    grepl(\"sci\", Subject_Consistency) ~ \"Science\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  select(-Subject_Consistency) %&gt;%\n  group_by(Subject, Gender, Consistency) %&gt;%\n  summarise(Count = n(), .groups = 'drop') %&gt;%\n  group_by(Subject, Gender) %&gt;%\n  mutate(Total = sum(Count), Percentage = Count / Total) %&gt;%\n  ungroup()\n\n# Creating the stacked bar chart with custom blue color palette\npv_gender_stacked_bar &lt;- ggplot(pv_gender_long, aes(x = Subject, y = Percentage, fill = Consistency)) +\n  geom_bar(stat = \"identity\", position = \"fill\") +\n  geom_text(aes(label = scales::percent(Percentage, accuracy = 0.1)),\n            position = position_fill(vjust = 0.5),\n            color = \"black\", size = 3) +\n  scale_y_continuous(labels = scales::percent_format()) +\n  scale_fill_manual(values = blue_palette) +  # Use custom blue palette\n  facet_wrap(~Gender) +  # Separate by gender\n  labs(title = \"% of Students' Performance Consistency by Subject and Gender\",\n       x = \"Subject\",\n       y = \"Percentage\") +\n  theme_minimal() +\n  theme(legend.title = element_blank(),\n        plot.title = element_text(face = \"bold\", hjust = 0.5),\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_blank(), \n    axis.title.y = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_line(color = \"grey\"),  \n    axis.line.x = element_line(color = \"grey\"))\n\n# pv_gender_stacked_bar\n\n\nThe code chunk below zoom into the individual Maths PV values, to understand which is infuncing factor which resulted in the observation in the previous plot between the 2 gender.\n\n\nShow the code\npv_gender_math_long &lt;- pisa_new %&gt;%\n  pivot_longer(cols = matches(\"^PV[0-9]+MATH\"), \n               names_to = \"PVxMath\", values_to = \"Value\") %&gt;%\n  select(Gender = ST004D01T, PVxMath, Value)\n\n# Rename the x-axis labels\nx_axis_labels &lt;- paste0(\"PV\", 1:10)\n\n# Create the plot with custom colors and x-axis labels\nmath_by_gender_pv &lt;- pv_gender_math_long %&gt;%\n  ggplot(aes(x = factor(PVxMath, levels = unique(PVxMath)), y = Value, fill = as.factor(Gender))) +\n  geom_boxplot(alpha = 0.7, outlier.size = 0.5) +\n  labs(title = \" Distribution of Individual Math Performance by Gender\",\n       x = \"\", y = \"Value\", fill = \"Gender\") +\n  scale_x_discrete(labels = x_axis_labels) +  # Rename the x-axis labels\n  theme_minimal() +\n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(), \n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank())\n\n# math_by_gender_pv\n\n\nThe code chunk below patch all visulizations together.\n\n\nShow the code\npatchwork2 &lt;- pv_math_gender / pv_sci_gender / pv_read_gender | (pv_gender_stacked_bar /math_by_gender_pv)\npatchwork2 &lt;- patchwork2 +\n  plot_annotation(title = \"Singapore Students Performance in Mathematics, Reading, and Science by Gender\", \n                  theme = theme(plot.title = element_text(size = 18, face = \"bold\", hjust = 0.5)))\npatchwork2\n\n\n\n\n\nThe visualizations present educational performance among Singaporean students, by subject and gender.\n\nGender 2 performs slightly higher for Maths but slight worse in Reading compared to Gender 1. Both genders show a similar performance for science.\nGender 2 general has a larger spread compared to Gender 1, suggesting a higher variance among the students in terms of performance across the subjects.\nThe stacked bar charts reveal subtle differences in performance consistency across subjects and gender. Gender 1 exhibits a slightly higher consistency in Math, whereas Gender 2 demonstrates greater consistency in Reading.\nThe boxplots then zoom into the individual Math PV scores, segmented by gender. Gender 2 shows a general better performance compared to Gender 1 across all PVs.\nGenerally, Gender 2 has a high upper 25 percentile among all PVs, while the lower 25 percentile does not vary that much between the 2. This might be the cause of the observation discovered in the stacked barchart."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-3-relationship-between-performances-with-school",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-3-relationship-between-performances-with-school",
    "title": "Take-home Exercise 1",
    "section": "EDA 3: Relationship between Performances with School",
    "text": "EDA 3: Relationship between Performances with School\nthe code chunk below create a new dataframe\n\n\nShow the code\npv_school &lt;- pisa_new %&gt;% select(school = CNTSCHID, starts_with(\"PV_avg\"), starts_with(\"consistency\"), Gender = ST004D01T)\npv_school_summary &lt;- pv_school %&gt;%\n  group_by(school) %&gt;%\n  summarise(\n    avg_math = mean(PV_avg_math, na.rm = TRUE),\n    var_math = var(PV_avg_math, na.rm = TRUE),\n    avg_read = mean(PV_avg_read, na.rm = TRUE),\n    var_read = var(PV_avg_read, na.rm = TRUE),\n    avg_sci = mean(PV_avg_scie, na.rm = TRUE),\n    var_sci = var(PV_avg_scie, na.rm = TRUE),\n    no_students = n(),\n    no_1 = sum(Gender == '1', na.rm = TRUE),\n    no_2 = sum(Gender == '2', na.rm = TRUE)\n  ) %&gt;%\n  ungroup() %&gt;%\n  # Create bins for each variance column\n  mutate(across(starts_with(\"var_\"), ~cut(., \n                                          breaks = quantile(., probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE),\n                                          labels = c(\"low\", \"lower-avg\", \"upper-avg\", \"high\"),\n                                          include.lowest = TRUE),\n                .names = \"binned_{.col}\"))\n\n\nThe code chunk below displayed the distribution of school’s average performance by subject.\n\n\nShow the code\n# Reshape the data for ggplot\npv_school_long &lt;- pv_school_summary %&gt;%\n  pivot_longer(\n    cols = starts_with(\"avg_\"),\n    names_to = \"subject\",\n    values_to = \"average_score\"\n  ) %&gt;%\n  mutate(subject = sub(\"avg_\", \"\", subject)) %&gt;%\n  pivot_longer(\n    cols = starts_with(\"binned_var_\"),\n    names_to = \"var_metric\",\n    values_to = \"variance_bin\"\n  ) %&gt;%\n  mutate(subject_var = sub(\"binned_var_\", \"\", var_metric)) %&gt;%\n  filter(subject == subject_var) # Ensure that the subject matches with its respective variance\n\n# Create the plot\nschool_plot&lt;- ggplot(pv_school_long, aes(y = subject, x = average_score)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               height = 0.5) +\n  geom_boxplot(width = .15,\n               outlier.shape = NA) +\n  stat_dots(aes(fill = variance_bin, color = variance_bin, alpha = 0.5),  \n            side = \"left\", \n            justification = 1.2, \n            binwidth = 2,\n            dotsize = 1.5) +\n  labs(title = 'Students Performance Acorss School', \n         x = \"Average PV by School\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    panel.grid.minor = element_blank(),\n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.text.x = element_text(margin = margin(t = -5, b = 10))\n  ) \n\n#school_plot\n\n\nThe code chunk below checks for if the school preforms consistently acorss various subject using a correlation heatmap\n\n\nShow the code\n# Select variables of interest and rename them\nselected_avg &lt;- pv_school_summary %&gt;%\n  select(avg_math, avg_read, avg_sci) %&gt;%\n  rename(\n    \"Math Avg\" = avg_math,\n    \"Read Avg\" = avg_read,\n    \"Science Avg\" = avg_sci,\n  )\n\n# Create the correlogram\ncorrelogram_avg &lt;- ggcorrmat(\n  data = selected_avg,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title = \"Average School Performance\",\n  subtitle = \"School Performance is relatively related in a linear manner\"\n)\n\n# Display the correlogram\n#correlogram_avg\n\n# Select variables of interest and rename them\nselected_vars &lt;- pv_school_summary %&gt;%\n  select(var_math, var_read, var_sci) %&gt;%\n  rename(\n    \"Math Variance\" = var_math,\n    \"Read Variance\" = var_read,\n    \"Science Variance\" = var_sci\n  )\n\n# Create the correlogram\ncorrelogram_var &lt;- ggcorrmat(\n  data = selected_vars,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title = \"School Performance Consistency Acorss Students\",\n  subtitle = \"Consistency in Performance is relatively related in a linear manner\"\n)\n\n# Display the correlogram\n#correlogram_var\n\n\nThe code chunk below patch the plots in one plot.\n\n\nShow the code\npatchwork_sch &lt;- (school_plot/(correlogram_avg + correlogram_var)) + \n  plot_layout(heights = c(4, 1)) # This makes the left plot three times wider than the right ones\n\npatchwork_sch &lt;- patchwork_sch + \n  plot_annotation(title = \"Singapore Students Performance in Mathematics, Reading, and Science by School\") & \n  theme(plot.title = element_text(size = 18, face = \"bold\", hjust = 0.5))\n\npatchwork_sch\n\n\n\n\n\nThe visualization presents a comparative distribution of average student performance scores in Mathematics, Reading, and Science across various schools.\n\nThe density plots for all 3 subjects shows two distinct peaks, this indicates a gap in terms of student’s performance between the 2 sectors of schools, which is likely to be private, and public.\nAdditionally, most number of schools with low variance among students performance which shaded in red is spotted along this upper part of the density curve. even stronger indication of general good performance across all students in the school.\nThis chart reveals potential relationship between school types and students pref romance in Maths, Science and Readings.\nThe 2 correlograms also highlights the correlationship in terms of subjetive performance for each school, suggesting that if the school does well in 1 subject, they are likely to do well in others. If the performance is consistent among students in 1 subject, the consistency is likely to be observed in other subjects as well."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-4-relationship-between-performances-with-socioeconomic-status",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-4-relationship-between-performances-with-socioeconomic-status",
    "title": "Take-home Exercise 1",
    "section": "EDA 4: Relationship between Performances with Socioeconomic Status",
    "text": "EDA 4: Relationship between Performances with Socioeconomic Status\nthe code chunk below create a new dataframe\n\n\nShow the code\npv_ESCS &lt;- pisa_new %&gt;% select(starts_with(\"PV_avg\"), starts_with(\"consistency\"), Gender = ST004D01T, ESCS)\n\n\nThe code chunk below creates a scatterstats plot for Maths and ESCS Relationship.\n\n\nShow the code\nescs_math &lt;- pv_ESCS %&gt;%\n  ggscatterstats(\n    x = ESCS, \n    y = PV_avg_math, \n    conf.level = 0.95,\n    bf.message = FALSE,\n    alpha = 0.5, \n    point.args = list(size = 2, alpha = 0.1, stroke = 0, color = 'grey20'),\n    xsidehistogram.args = list(fill = \"#c73824\", color = \"white\", na.rm = TRUE, alpha = 0.7),\n    ysidehistogram.args = list(fill = \"#0477bf\", color = \"white\", na.rm = TRUE, alpha = 0.7),\n    smooth.line.args = list(linewidth = 0.4, color = \"blue\", method = \"lm\", formula = y ~\n    x)\n  ) +\n  labs(\n    title = \"Math Performance\",\n    x = \"ESCS INDEX\",\n    y = \"Average Math Score\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    panel.grid.minor = element_blank(),\n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank()\n  )\n# escs_math\n\n\nThe code chunk below creates a scatterstats plot for Science and ESCS Relationship.\n\n\nShow the code\nescs_sci &lt;- pv_ESCS %&gt;%\n  ggscatterstats(\n    x = ESCS, \n    y = PV_avg_scie, \n    conf.level = 0.95,\n    bf.message = FALSE,\n    alpha = 0.5, \n    point.args = list(size = 2, alpha = 0.1, stroke = 0, color = 'grey20'),\n    xsidehistogram.args = list(fill = \"#c73824\", color = \"white\", na.rm = TRUE, alpha = 0.7),\n    ysidehistogram.args = list(fill = \"#0477bf\", color = \"white\", na.rm = TRUE, alpha = 0.7),\n    smooth.line.args = list(linewidth = 0.4, color = \"blue\", method = \"lm\", formula = y ~\n    x)\n  ) +\n  labs(\n    title = \"Science Performance\",\n    x = \"ESCS INDEX\",\n    y = \"Average Science Score\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    panel.grid.minor = element_blank(),\n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank()\n  )\n# escs_sci\n\n\nThe code chunk below creates a scatterstats plot for Reading and ESCS Relationship.\n\n\nShow the code\nescs_read &lt;- pv_ESCS %&gt;%\n  ggscatterstats(\n    x = ESCS, \n    y = PV_avg_read, \n    conf.level = 0.95,\n    bf.message = FALSE,\n    alpha = 0.5, \n    point.args = list(size = 2, alpha = 0.1, stroke = 0, color = 'grey20'),\n    xsidehistogram.args = list(fill = \"#c73824\", color = \"white\", na.rm = TRUE, alpha = 0.7),\n    ysidehistogram.args = list(fill = \"#0477bf\", color = \"white\", na.rm = TRUE, alpha = 0.7),\n    smooth.line.args = list(linewidth = 0.4, color = \"blue\", method = \"lm\", formula = y ~\n    x)\n  ) +\n  labs(\n    title = \"Reading Performance\",\n    x = \"ESCS INDEX\",\n    y = \"Average Reading Score\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    panel.grid.minor = element_blank(),\n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank()\n  )\n# escs_read\n\n\nThe code chunk below plots a correlation heatmap between aggregated PV values with ESCS Index\n\n\nShow the code\n# Select variables of interest and rename them\nselected_vars &lt;- pisa_new %&gt;%\n  select(starts_with('PV_'),\n         ESCS)\n\n# Create the correlogram\ncorrelogram2 &lt;- ggcorrmat(\n  data = selected_vars,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title = \"Correlogram for Student Performance\",\n  subtitle = \"Subject Performance is relatively related in a linear manner\"\n)\n# orrelogram2\n\n\nThe code chunk below patch all visulizations together.\n\n\nShow the code\npatchwork3 &lt;- (correlogram2 | escs_math) / (escs_sci | escs_read)\npatchwork3 &lt;- patchwork3 +\n  plot_annotation(title = \"Singapore Students Performance in Mathematics, Reading, and Science by ESCS\", \n                  theme = theme(plot.title = element_text(size = 18, face = \"bold\", hjust = 0.5)))\npatchwork3\n\n\n\n\n\nThe chart illustrates a moderate, positive correlation between the Economic, Social, and Cultural Status (ESCS) Index and student performance scores in Mathematics, Reading, and Science for a sample of Singaporean students.\n\nThe p-value reported are all below 0.05, this indicates that the null hypothesis can be rejected with a high degree of confidence. There is a statistically significant correlation between Performance and the ESCS Index for all subjects.\nPearson correlation coefficients is around 0.44 to 0.45 across all subjects, the data suggests that higher socio-economic status is associated with better academic performance. However, as the values is small, this relationship is only a moderate relationship.\nAdditionally, there is also no significant difference between the influence by ESCS to different subjects."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-5-how-about-socioeconomic-status-and-school",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-5-how-about-socioeconomic-status-and-school",
    "title": "Take-home Exercise 1",
    "section": "EDA 5: How about Socioeconomic Status and School ?",
    "text": "EDA 5: How about Socioeconomic Status and School ?\nEDA 3 reveals that a small groups of schools are preforming relatively better than other schools, EDA 4 proves a moderate linear relationship between socioeconomic status and student’s performance. Might this be a reason that certain school preforms extremely well among all students to the compared to other schools? Which subjects will be influenced the most?\nthe code chunk below assign a group number for different schools in terms of their performance. 5 being the best preformaning school, while 1 is the least.\n\n\nShow the code\npv_school_group &lt;- pv_school_summary %&gt;%\n  mutate(across(starts_with(\"avg_\"), ~cut(., \n                                          breaks = quantile(., probs = c(0, 0.2, 0.4, 0.6, 0.7, 1), na.rm = TRUE),\n                                          labels = c(1, 2, 3, 4, 5),\n                                          include.lowest = TRUE),\n                .names = \"binned_{.col}\"))\n# it is noticed that most school has a consistency in terms of performance, one single field will be assigned based on the most appeared bin for easier comparison. \n\npv_school_group &lt;- pv_school_group %&gt;%\n  rowwise() %&gt;%\n  mutate(sch_group = factor(round(mean(as.numeric(as.character(c_across(starts_with(\"binned_avg\")))), na.rm = TRUE)))) %&gt;%\n  ungroup()\n\n\nthe code chunk below creates a new dataframe and join the school group with the individual student’s ESCS index.\n\n\nShow the code\nschool_escs_new &lt;- pisa_new %&gt;% select(school = CNTSCHID, ESCS)\n\nschool_escs_new  &lt;- school_escs_new  %&gt;%\n  left_join(pv_school_group %&gt;% select(school, sch_group), by = \"school\") %&gt;%\n  mutate(sch_group = factor(sch_group, levels = c(\"1\", \"2\", \"3\", \"4\", \"5\"))\n         )\n\n\nThe code chunk below conducted one-way ANOVA test between ESCS index Across Different School Group.\n\n\nShow the code\nanova &lt;- ggbetweenstats(\n  data = school_escs_new,\n  x = sch_group, \n  y = ESCS,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n) +\n  labs(title = \"ESCS index Across Different School Group\", x = \"School Group\") +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5)\n  )\n\n# anova\n\n\nBut will a students who are from lower ESCS tier preform bettwe in a better school?\nthe code chunk below creates a new dataframe and join the school group with the individual student performance.\n\n\nShow the code\nschool_escs &lt;- pisa_new %&gt;% select(school = CNTSCHID, starts_with(\"PV_avg\"), ESCS_bin)\n\nschool_escs &lt;- school_escs %&gt;%\n  left_join(pv_school_group %&gt;% select(school, sch_group), by = \"school\")\n\nschool_escs_long &lt;- school_escs %&gt;%\n  pivot_longer(\n    cols = c(PV_avg_math, PV_avg_scie, PV_avg_read), \n    names_to = \"subject\",      \n    values_to = \"value\"       \n  )\n\nschool_escs_long &lt;- school_escs_long %&gt;%\n  mutate(sch_group = factor(sch_group, levels = c(\"1\", \"2\", \"3\", \"4\", \"5\")),\n         subject = factor(subject, \n                          levels = c(\"PV_avg_math\", \"PV_avg_read\", \"PV_avg_scie\"),\n                          labels = c(\"Math\", \"Reading\", \"Science\")))\n\n\nThe code chunk below draws histogram to see the distribution of PVs across different school type and ESCS tiers.\n\n\nShow the code\nbase_color &lt;- \"#c73824\"\nred_shades &lt;- c(\n  lighten(base_color, amount = 0.9),  # Lightest\n  lighten(base_color, amount = 0.7),\n  lighten(base_color, amount = 0.5),\n  lighten(base_color, amount = 0.3),\n  lighten(base_color, amount = 0.1)\n)\n\nsch_escs_plot &lt;- ggplot(school_escs_long, aes(x = ESCS_bin, y = value, fill = ESCS_bin)) + \n  geom_boxplot() + \n  facet_grid(sch_group ~ subject) +\n  scale_fill_manual(values = red_shades) +\n  labs(title = \"Distribution of Students Performance by School Group and ESCS tier\") +\n  theme_minimal() +\n  theme(\n    legend.title = element_blank(),\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    panel.background = element_rect(fill = \"white\", colour = \"white\"),\n    panel.grid.major = element_line(color = \"grey90\"),\n    panel.grid.minor = element_line(color = \"grey90\"),\n    strip.background = element_rect(fill = \"black\"),\n    strip.text = element_text(color = \"white\"), \n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_rect(colour = \"black\", fill=NA, size=0.5)  # Add border around each facet\n  )\n# sch_escs_plot\n\n\n\n\nShow the code\npatchwork_5 &lt;- (anova|sch_escs_plot) \n\npatchwork_5 &lt;- patchwork_5 + \n  plot_annotation(title = \"Students Performance by School Group and ESCS\") & \n  theme(plot.title = element_text(size = 18, face = \"bold\", hjust = 0.5))\n\npatchwork_5\n\n\n\n\n\nThe ANOVA test on the left shows a distribution of the Economic, Social, and Cultural Status (ESCS) index across different school groups.\n\nSchool Groups with higher average preform show a higher ESCS index.\nF-statistic is approximately 294.76 with a p-value of approximately 5.89e-210. This suggests that there is a statistically significant difference in the ESCS index among the different school groups.\nAbove the violin plots, there are lines connecting the different groups with associated p-values indicating the results of each pairwise comparison. This suggests that all groups shown are having small p values, suggesting that the ESCS index means of each pair of groups are significantly different from each other.\nThe violin plot overlaid with box plots for school groups 5 shows a much wider sections of the violin indicating at the higher ESCS, suggesting a higher density of students are from this portion\n\nThe box plots arranged in a grid, showing student performance in three different subjects: Math, Reading, and Science, among 4 different ESCS tiers. This plot aims to understand within the same group of school, would the difference in ESCS make a difference within the same school group in student performance.\n\nComparing Students performance within each school group, the observation of higher ESCS tier reflects a higher performance seems to hold truth as well.\nA notably higher number of outliers are observed for School Group 5 across all ESCS tiers, particularly in Math and Science. This pattern may indicate a wider range of performance levels or varying factors affecting achievement within this group.\nIn contrast, the subject of Reading displays outliers across all school groups and tiers, hinting at a broader variance in performance among Singaporean students in Reading compared to Math and Science."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#appendix-how-about-socioeconomic-status-and-gender",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#appendix-how-about-socioeconomic-status-and-gender",
    "title": "Take-home Exercise 1",
    "section": "Appendix: How about Socioeconomic Status and Gender ?",
    "text": "Appendix: How about Socioeconomic Status and Gender ?\nThe code chunk below creates a new datafrmae for gender and escs information.\n\n\nShow the code\n# the code chunk below creates a new dataframe and join the school group with the individual student.\ngender_escs &lt;- pisa_new %&gt;% select(starts_with(\"PV_avg\"), ESCS_bin, Gender = ST004D01T)\n\ngender_escs_long &lt;- gender_escs %&gt;%\n  pivot_longer(\n    cols = c(PV_avg_math, PV_avg_scie, PV_avg_read), \n    names_to = \"subject\",      \n    values_to = \"value\"       \n  )\n\ngender_escs_long &lt;- gender_escs_long %&gt;%\n  mutate(subject = factor(subject, \n                          levels = c(\"PV_avg_math\", \"PV_avg_read\", \"PV_avg_scie\"),\n                          labels = c(\"Math\", \"Reading\", \"Science\")))\n\n\nThe code chunk below draws a histogram to see the distribution of PVs across different ESCS tier and Gender.\n\n\nShow the code\nbase_color &lt;- \"#c73824\"\nred_shades &lt;- c(\n  lighten(base_color, amount = 0.9),  # Lightest\n  lighten(base_color, amount = 0.7),\n  lighten(base_color, amount = 0.5),\n  lighten(base_color, amount = 0.3),\n  lighten(base_color, amount = 0.1)\n)\n\nggplot(gender_escs_long, aes(x = ESCS_bin, y = value, fill = ESCS_bin)) + \n  geom_boxplot() + \n  facet_grid(Gender ~ subject) +\n  scale_fill_manual(values = red_shades) +\n  labs(title = \"Distribution of Students Performance by Gender and ESCS tier\", x = \"ESCS Tier\") +\n  theme_minimal() +\n  theme(\n    legend.title = element_blank(),\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    panel.background = element_rect(fill = \"white\", colour = \"white\"),\n    panel.grid.major = element_line(color = \"grey90\"),\n    panel.grid.minor = element_line(color = \"grey90\"),\n    strip.background = element_rect(fill = \"black\"),\n    strip.text = element_text(color = \"white\"), \n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_rect(colour = \"black\", fill=NA, size=0.5)  # Add border around each facet\n  )\n\n\n\n\n\n– end of page –"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "theory: a summary of R for Visual Analytics - Chap 1\n\nstarting with R\nbasics about ggplot2\ndive into each layered grammars of ggplot2\n\npractice: some exploration about the dataset\n\nQucik access to Some Plotting Exercise below"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "Install and launching R packages",
    "text": "Install and launching R packages\nThe code below use p_load() of pacman packages to check if tidyverse packages are installed in the computer. If there are, then they will launch into R\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "Importing the data",
    "text": "Importing the data\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nGenerating a summary of the imported data\n\nsummary(exam_data)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\n\n\n\n\n\nAbout summary(data_frame)\n\n\n\nIt will display length, class, and mode for categorical variables, and display Min, 1st Qu, Median, Mean, 3rd Qu, Max for numeric variables"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#comparing-r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#comparing-r-graphics-vs-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "Comparing R Graphics VS ggplot",
    "text": "Comparing R Graphics VS ggplot\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "Grammar of Graphics",
    "text": "Grammar of Graphics\nThere are two principles in Grammar of Graphics:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "A Layered Grammar of Graphics",
    "text": "A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\n\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\n\n\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statistical transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-axis title, or legend background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2-summary",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2-summary",
    "title": "Hands-on Exercise 1",
    "section": "An Overview of Layered Grammar",
    "text": "An Overview of Layered Grammar\nbelow shows how each layer built on top of each other based on the 7 grammars of ggplot2\n\ndataaesgeostatfacetscoordinatethemes\n\n\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) \n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\") +\n  facet_wrap(~ CLASS)                                                          \n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\") +\n  facet_wrap(~ CLASS) +\n  coord_flip()\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\") +\n  facet_wrap(~ CLASS) +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#data-1",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#data-1",
    "title": "Hands-on Exercise 1",
    "section": "Data",
    "text": "Data\n\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\n\n\nggplot(data=exam_data)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#aesthetic-mappings",
    "title": "Hands-on Exercise 1",
    "section": "Aesthetic mappings",
    "text": "Aesthetic mappings\n\nAll aesthetics of a plot are specified in the aes() function call\neach geom layer can have its own aes specification\n\nadding the aesthetic element to include the x-axis and the axis’s label\n\nggplot(data=exam_data, \n       aes(x= MATHS))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2-geometric-objects",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2-geometric-objects",
    "title": "Hands-on Exercise 1",
    "section": "ggplot2 Geometric Objects",
    "text": "ggplot2 Geometric Objects\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\n\n\n\nFor complete list, please refer to here\n\n\n\nGeometric Objects: geom_bar\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nGeometric Objects: geom_dotplot\n\nwidth of a dot: bin width (or maximum width, depending on the binning algorithm),\ndots are stacked, each dot representing one observation\n\n\nDo thisNot this\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL) \n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\nInstead should perform the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\n\nGeometric Objects: geom_histogram()\nplotting a histogram using geom_histogram() using MATHS field of exam_data\n\nBasic HistogramModifying geom()Modifying aes()\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nbins: change the number of bins to 20 (default = 30)\nfill: shade the histogram with light blue color\ncolor: change the outline colour to black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")       \n\n\n\n\n\n\n\ndifferent gender are shaded in different colors\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")     \n\n\n\n\n\n\n\n\n\nGeometric Objects: geom-density()\n\ncomputes and plots kernel density estimate - smoothed version of histogram\nalternative to histogram for continuous data that comes from an underlying smooth distribution\n\n\nBasicBy Gender\n\n\ndistribution of Maths scores in a kernel density estimate plot\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()                 \n\n\n\n\n\n\ntwo kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()                 \n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_boxplot\n\ngeom_boxplot() displays continuous value list.\nvisualises 5 summary statistics (median, 2 hinges and 2 whiskers), and all “outlying” points individually.\n\n\nBasic BoxplotNotched plot\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()                            \n\n\n\n\n\n\n\nNotches are used to help visually assess whether the medians of distributions differ\nIf the notches do not overlap, the medians are different\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_violin\n\ngeom_violin creates violin plot which are comparing multiple data distributions\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()                         \n\n\n\n\n\n\nGeometric Objects: geom_point()\n\ngeom_point() is especially useful for creating scatterplot.\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()                                       \n\n\n\n\n\n\nA Combined Plot\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#stat-1",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#stat-1",
    "title": "Hands-on Exercise 1",
    "section": "Stat",
    "text": "Stat\nThe Statistics functions statistically transform data, usually as some form of summary\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\nWorking with Boxplot\nThe default boxplots are incomplete because the positions of the means were not shown.\n\nstat_()geom()\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)                                                      \n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead.\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)                                                               \n\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", colour = \"red\", :\nIgnoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\n\n\n\n\n\nWorking with scatterplot\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\nmethod: loess (default)method: lm\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)                                                             \n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)                                                            \n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facets-1",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facets-1",
    "title": "Hands-on Exercise 1",
    "section": "Facets",
    "text": "Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\nfacet_wrap()facet_grid()\n\n\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)                                                          \n\n\n\n\n\n\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#coordinates",
    "title": "Hands-on Exercise 1",
    "section": "Coordinates",
    "text": "Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n- coord_cartesian(): default, where you specify x and y values (e.g. allow to zoom in or out). - coord_flip(): a cartesian system with the x and y flipped - coord_fixed(): a cartesian system with a “fixed” aspect ratio - coord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\nWorking with Coordinates\n\nverticalhorizontal\n\n\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()                                                           \n\n\n\n\n\n\nfliping the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()                                                          \n\n\n\n\n\n\n\n\n\nChanging the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\ndefaultrange at 0-100\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)                                                          \n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))                                                  \n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#theme",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#theme",
    "title": "Hands-on Exercise 1",
    "section": "Theme",
    "text": "Theme\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nA list of theme can be found at this link\n\ntheme_gray()theme_classic()theme_minimal()\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()                                                       \n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()                                                       \n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#stacked-bar-chart-of-race-distribution-by-gender",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#stacked-bar-chart-of-race-distribution-by-gender",
    "title": "Hands-on Exercise 1",
    "section": "Stacked Bar Chart of Race Distribution by Gender",
    "text": "Stacked Bar Chart of Race Distribution by Gender\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = reorder(RACE, -table(RACE)[RACE]), fill = GENDER)) +\n  geom_bar(position = \"stack\",\n           alpha = 0.9) +\n  geom_text(\n    aes(label = after_stat(count)),\n    stat = \"count\",\n    position = position_stack(vjust = 0.5),\n    size = 3,\n    color = \"white\"\n  ) +\n  labs(title = \"Race Distribution by Gender\", x = \"Race\", y = \"Number of Students\") +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#boxplot-of-english-scores-by-class",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#boxplot-of-english-scores-by-class",
    "title": "Hands-on Exercise 1",
    "section": "Boxplot of English Scores by Class",
    "text": "Boxplot of English Scores by Class\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = CLASS, y = ENGLISH)) +\n  geom_boxplot(fill = \"#D1EEEE\", color = \"#7A8B8B\") +\n  geom_hline(yintercept = mean(exam_data$ENGLISH), linetype = \"dashed\", color = \"#CD2626\") +\n  stat_summary(\n    fun = mean, \n    geom = \"point\", \n    color = \"#CD2626\"\n  ) +\n  annotate(\n    \"text\", \n    x = 1,  y = mean(exam_data$ENGLISH) + 2,\n    label = paste(\"Avg:\", round(mean(exam_data$ENGLISH), 2)),\n    color = \"#CD2626\"\n  ) +\n  coord_cartesian(ylim = c(0, 100)) +\n  labs(\n    title = \"English Scores by Class\",\n    x = \"Class\",\n    y = \"English Score\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#scatterplot-of-math-and-science-scores",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#scatterplot-of-math-and-science-scores",
    "title": "Hands-on Exercise 1",
    "section": "Scatterplot of Math and Science Scores",
    "text": "Scatterplot of Math and Science Scores\n\n\nShow the code\nggplot(data = exam_data,\n       aes(x = MATHS, y = SCIENCE)) +\n  geom_point(aes(color = GENDER), size = 1.5, alpha = 0.7) +\n  geom_hline(yintercept = 50, linetype = \"dashed\", color = \"gray\") +  \n  geom_vline(xintercept = 50, linetype = \"dashed\", color = \"gray\") +  \n  geom_smooth(method = \"lm\", size = 0.5) +      \n  labs(\n    title = \"Correlation between Math and Science Scores\",\n    x = \"Math Score\",\n    y = \"Science Score\"\n  ) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  theme_minimal()\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#density-plot-of-english-scores-by-class",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#density-plot-of-english-scores-by-class",
    "title": "Hands-on Exercise 1",
    "section": "Density Plot of English Scores by Class",
    "text": "Density Plot of English Scores by Class\n\n\nShow the code\n# Density plot of ENGLISH scores combined for both genders faceted by class\nggplot(data = exam_data, \n       aes(x = ENGLISH, fill = GENDER)) +\n  geom_density(alpha = 0.5, color = \"black\", linewidth = 0.3) + \n  labs(title = \"Distribution of English Scores by Class\", x = \"English Score\") +\n  theme_minimal() +\n  facet_grid(CLASS ~ .) +\n  theme(axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        legend.text = element_text(size = 8),  \n        legend.title = element_text(size = 8))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html",
    "title": "Hands-on Exercise 5a",
    "section": "",
    "text": "a summary of Correlation Analysis - Qucik access to Correlation\na summary of Treemap Visualisation with R- Qucik access to Treemap"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#correlation-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#correlation-analysis",
    "title": "Hands-on Exercise 5a",
    "section": "Correlation Analysis",
    "text": "Correlation Analysis\n\n\n\npackage\nR\nggstatsplot\ncorrplot\n\n\nfunc\npairs()\nggcormat()\ngrouped_ggcorrmat()\ncorrplot()\n\n\ncommon arguement\ndata[rows,col]\nna.action\nlower.panel\nupper.panel\ncex.labels\nbg\npanel\npch\ncor.vars\nhc.order\nmatrix.type\ntype\nggcorrplot.args\ngrouping.var\nplotgrid.args\nannotation.args\nmethod\ntype\norder\ncorrplot.mixed()\n\n\nlimitation & advantages\nscatter plots appear very cluttered when the number of observations is relatively large\ncomprehensive and professional statistical report\nvisualization & determine the statistical significance of the correlations"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#tree-map",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#tree-map",
    "title": "Hands-on Exercise 5a",
    "section": "Tree Map",
    "text": "Tree Map\n\n\n\n\n\n\n\n\n\npackage\ntreemap\ntreemapify\nd3treeR\n\n\nfunc\ntreemap()\ngeom_treemap()\nd3tree()\n\n\ncommon arguement\nindex\nvSize\nvColor\npalette\ntype\npalette\nsortID\nscale_fill_gradient\naes(area, fill, subgroup)\ngeom_treemap_subgroup_border\ntreemap()\nd3tree()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 5a",
    "section": "Installing and Launching R Packages",
    "text": "Installing and Launching R Packages\ncorrplot, ggstatsplot, plotly and tidyverse are used\n\n\nCode\npacman::p_load(corrplot, ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#importing-and-preparing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#importing-and-preparing-the-data-set",
    "title": "Hands-on Exercise 5a",
    "section": "Importing and Preparing The Data Set",
    "text": "Importing and Preparing The Data Set\nWine Quality Data Set of UCI Machine Learning Repository consists of 13 variables and 6497 observations. (red wine and white wine data have been combined into one data file called wine_quality and is in csv file format)\nimport the data into R by using read_csv() of readr package.\n\n\nCode\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\n\nBeside type, the rest of the variables are numerical and continuous data type"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#building-correlation-matrix-pairs-method",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#building-correlation-matrix-pairs-method",
    "title": "Hands-on Exercise 5a",
    "section": "Building Correlation Matrix: pairs() method",
    "text": "Building Correlation Matrix: pairs() method\npairs() of R can create a scatterplot matrix. Some arguments can be changed are:\n\ndata[rows,col], empty: select all, [start, end]\nna.action = na.omit (By default, missing values are passed and will often be ignored within a panel)\nhorInd and verIndselect or re-order variables: with different ranges of consecutive values they can be used to plot rectangular windows of a full pairs plot; in the latter case ‘diagonal’ refers to the diagonal of the full plot.\nlower.panel = NULL\nupper.panel = NULL\ncex.labels : text size of diagonal label\nbg = “light blue” : color of the scatter points\npanel = panel.smooth: plot the x, y func\npch = 24: triangular plot with size 24\n\n\nBasicChange inputLowerUpperCorrelation CoefficientsOther Arguments\n\n\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 12 by 12 matrix. The variables names are in the diagonals\n\n\nCode\npairs(wine[,1:12])\n\n\n\n\n\n\n\ninput of pairs() can be a matrix or data frame. Row 1 to 30 and Columns 1 to 11 of wine dataframe is used to build the scatterplot matrix.\n\n\nCode\npairs(wine[1:30,1:11])\n\n\n\n\n\n\n\nIt is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\nupper.panel argument will be used as shown to show only the lower half.\n\n\nCode\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\nSimilarly, upper half can be kept only\n\n\nCode\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\n\n\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\n\n\nCode\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n\n\n\n\n\n\n\nlower.panel = NULL to off the lower panel, panel = panel.smooth to draw the xy fun, pch = 24 to change scatterpoint to triangle with size 24, bg = “light blue” to set the triangle to light blue, cex.labels = 0.5 to change the text size of diagonal\n\n\nCode\npairs(wine[,2:12], \n      upper.panel = panel.cor,\n      panel = panel.smooth,\n      pch = 24, \n      bg = \"light blue\",\n      cex.labels = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#visualising-correlation-matrix-ggcormat",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#visualising-correlation-matrix-ggcormat",
    "title": "Hands-on Exercise 5a",
    "section": "Visualising Correlation Matrix: ggcormat()",
    "text": "Visualising Correlation Matrix: ggcormat()\nlimitation of the correlation matrix:\n\nscatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations).\n\nTo over come this problem, Corrgram data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.\nSome R packages provide function to plot corrgram:\n\ncorrgram\nellipse\ncorrplot\nggstatsplot\n\nThis section will cover ggcorrmat() of ggstatsplot package, some arguments can be changed are:\n\ncor.vars : compute the correlation matrix\nhc.order = TRUE: reorder\nmatrix.type : \"upper\" (default), \"lower\", or \"full\"\ntype: A character specifying the type of statistical approach, “parametric”, “nonparametric”, \"robust\" , \"bayes\". Can specify just the initial letter.\n\ngrouped_ggcorrmat() of ggstatsplot can be for faceting, arguments are:\n\ngrouping.var\nplotgrid.args : provides a list of additional arguments passed to patchwork::wrap_plots\nannotation.args: calling plot annotation arguments of patchwork package\n\n\nBasicadjust ggcorrplot.argsmultiple plotsother arguments\n\n\nusing ggcorrmat() to visualise a correlation matrix and professional statistical report\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram\n\n\n\nCode\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\n\nggcorrplot.args : argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\n\nhc.order: If TRUE, correlation matrix will be hc.ordered using hclust function.\ntl.cex: size of text label (variable names)\nlab_size : size to be used for the correlation coefficient labels\n\n\n\n\nCode\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10,\n                         lab_size = 3),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\n\n\nfaceting is only available in grouped_ggcorrmat() of ggstatsplot.\n\nonly argument needed: grouping.var\nplotgrid.args : provides a list of additional arguments passed to patchwork::wrap_plots\nannotation.args: calling plot annotation arguments of patchwork package.\n\n\n\nCode\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 5,\n                         lab_size = 1),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n) \n\n\n\n\n\n\n\n\nmatrix.type : “lower” to keep only the lower plot\ntype: A character specifying the type of statistical approach, “parametric”, “nonparametric”, \"robust\" , \"bayes\". Can specify just the initial letter.\n\n\n\nCode\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  matrix.type = 'lower',\n  type = \"bayes\",\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10,\n                         lab_size = 3),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#visualising-correlation-matrix-using-corrplot-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#visualising-correlation-matrix-using-corrplot-package",
    "title": "Hands-on Exercise 5a",
    "section": "Visualising Correlation Matrix using corrplot Package",
    "text": "Visualising Correlation Matrix using corrplot Package\ncorrplot provides a visual exploratory tool on correlation matrix. It provides a rich array of plotting options in visualization method, graphic layout, color, legend, text labels, etc. It also provides p-values and confidence intervals to help users determine the statistical significance of the correlations.\n has about 50 parameters, however the mostly common ones are only a few. We can get a correlation matrix plot with only one line of code in most scenes.\nCommon parameters for corrplot() :\n\nmethod: 'circle','square','ellipse', 'number','shade','color','pie'\ntype: layout types including 'full','upper' and 'lower'\norder:\n\n'alphabet': alphabetical order\n'AOE': angular order of the eigenvectors. See Michael Friendly (2002)for details.\n'FPC': for the first principal component order\n'hclust': for hierarchical clustering order\n\ncorrplot.mixed(): wrapped function for mixed visualization style, which can set the visual methods of lower and upper triangular separately\n\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\n\nCode\nwine.cor &lt;- cor(wine[, 1:11])\n\n\n\nDefaultMethodTypediag & tl.colMixedSig. TestReorder AOEReorderExploration\n\n\ncorrplot() is used to plot the corrgram by using all the default setting:\n\ncircle\nsymmetric matrix\ndiverging blue-red:\n\nBlue: positive correlation coefficients\nred colours: negative correlation coefficients\nIntensity: Darker -&gt; relatively stronger linear relationship, lighter colours -&gt; weaker\n\n\n\n\nCode\ncorrplot(wine.cor)\n\n\n\n\n\n\n\nIn corrplot package, there are 7 visual geometrics can be changed using method: circle, square, ellipse, number, shade, color and pie. The default is circle.\n\n\nCode\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\n\n\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\n\nCode\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\n\n\ndiag: turn off the diagonal cells\ntl.col: change the axis text label colour to black colour\n\n\nCode\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\n\n\ndesign corrgram with mixed visual matrix of one half and numerical matrix on the other half using corrplot.mixed()\n\nlower half: ellipse\nupper half: numerical matrix (i.e. number) using tl.pos\ndiag: specify the glyph on the principal diagonal of the corrgram\n\n\n\nCode\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables. We can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\n\nCode\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\nMatrix reorder is very important for mining the hidden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order\n\n\n\nCode\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\n\nCode\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)\n\n\n\n\n\n\n\n\n\nCode\ncorrplot.mixed(wine.cor, \n               lower = \"pie\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               order=\"AOE\",\n               tl.col = \"black\",\n               tl.srt = 45\n               )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#reference",
    "title": "Hands-on Exercise 5a",
    "section": "Reference",
    "text": "Reference\nMichael Friendly (2002). “Corrgrams: Exploratory displays for correlation matrices”. The American Statistician, 56, 316–324.\nD.J. Murdoch, E.D. Chow (1996). “A graphical display of large correlation matrices”. The American Statistician, 50, 178–180."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#overview",
    "title": "Hands-on Exercise 5a",
    "section": "Overview",
    "text": "Overview\nThe hands-on exercise consists of 3 main section:\n\nmanipulate transaction data into a treemap strcuture by using selected functions provided in dplyr package\nplot static treemap by using treemap package\ndesign interactive treemap by using d3treeR package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#installing-and-launching-r-packages-1",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#installing-and-launching-r-packages-1",
    "title": "Hands-on Exercise 5a",
    "section": "Installing and Launching R Packages",
    "text": "Installing and Launching R Packages\n\n\nCode\npacman::p_load(treemap, treemapify, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#data-wrangling",
    "title": "Hands-on Exercise 5a",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nIn this exercise, REALIS2018.csv data will be used. This dataset provides information of private property transaction records in 2018. The dataset is extracted from REALIS portal of Urban Redevelopment Authority (URA).\n\nImporting the data set\nIn the code chunk below, read_csv() of readr is used to import realis2018.csv into R and parsed it into tibble R data.frame format.\n\n\nCode\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\n\n\n\nData Wrangling and Manipulation\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No.of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nIn our case, group_by() will used together with summarise() to derive the summarised data.frame.\n\nGrouped summaries without the PipeGrouped summaries with the pipe\n\n\nThe code chank below shows a typical two lines code approach to perform the steps.\n\n\nCode\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\nNote\n\nAggregation functions such as sum() and meadian() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it.\n\n\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, %&gt;%\n\n\nCode\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#designing-treemap-with-treemap-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#designing-treemap-with-treemap-package",
    "title": "Hands-on Exercise 5a",
    "section": "Designing Treemap with treemap Package",
    "text": "Designing Treemap with treemap Package\ntreemap package is a R package specially designed to offer great flexibility in drawing treemaps. The core function, namely: treemap() offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.\ntreemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\nFirst, we will select records belongs to resale condominium property type from realis2018_selected data frame.\n\n\nCode\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\n\n\nDefaultvColor & type\n\n\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nThings to learn from the three arguments used:\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize\n\nThe column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\n\nWarning:\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas.\n\n\nIn the code chunk below, type argument is define as value.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.\n\n\n\n\n\nColours\nThere are two arguments that determine the mapping to color palettes: mapping and palette. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.\n\nThe “value” type treemapThe “manual” type treemap“manual” type treemap - single colour palette\n\n\nThe code chunk below shows a value type treemap.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nThing to learn from the code chunk above:\n\nalthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding.\n\n\n\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nThings to learn from the code chunk above:\n\nThe colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative\n\n\n\nTo overcome this problem, a single colour palette such as Blues should be used.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\nTreemap Layout\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.\n\nalgorithm argumentUsing sortID\n\n\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#designing-treemap-using-treemapify-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#designing-treemap-using-treemapify-package",
    "title": "Hands-on Exercise 5a",
    "section": "Designing Treemap using treemapify Package",
    "text": "Designing Treemap using treemapify Package\ntreemapify is a R package specially developed to draw treemaps in ggplot2. In this section, you will learn how to designing treemps closely resemble treemaps designing in previous section by using treemapify. Before you getting started, you should read Introduction to “treemapify” its user guide.\n\nbasic treemap\n\n\nCode\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n\n\n\n\n\n\n\nDefining hierarchy\n\nGroup by Planning RegionGroup by Planning AreaAdding boundary line\n\n\n\n\nCode\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#designing-interactive-treemap-using-d3treer",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#designing-interactive-treemap-using-d3treer",
    "title": "Hands-on Exercise 5a",
    "section": "Designing Interactive Treemap using d3treeR",
    "text": "Designing Interactive Treemap using d3treeR\n\nInstalling d3treeR package\nThis slide shows you how to install a R package which is not available in cran.\n\nIf this is the first time you install a package from github, you should install devtools package by using the code below or else you can skip this step.\n\n\n\nCode\n# install.packages(\"devtools\")\n\n\n\nNext, you will load the devtools library and install the package found in github by using the codes below.\n\n\n\nCode\nlibrary(devtools)\n# install_github(\"timelyportfolio/d3treeR\")\n\n\n\nNow you are ready to launch d3treeR package\n\n\n\nCode\nlibrary(d3treeR)\n\n\n\n\nDesigning An Interactive Treemap\nThe codes below perform two processes.\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\n\nCode\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\n\nCode\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "theory: a summary of R for Visual Analytics - Chap 2\n\na summary of 4 ggplot2 extensions\na dive into ggplot2 extensions\n\npractice: some exploration about the dataset\n\nQucik access to Some Plotting Exercise below"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 2",
    "section": "Installing and loading the required libraries",
    "text": "Installing and loading the required libraries\nIn this exercise, beside tidyverse, four R packages will be used. They are: ggrepel, ggthemes, hrbrthemes, patchwork.\nA summary of these 4 packages can be found at the section below.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on Exercise 2",
    "section": "Importing data",
    "text": "Importing data\nThe code chunk below is to import the data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "ggrepel",
    "text": "ggrepel\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text\n\nwith ggrepelwith ggplot2 only\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s look at the code\n\nwith ggrepelwith ggplot2 only\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nHere, we just simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggthemes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggthemes",
    "title": "Hands-on Exercise 2",
    "section": "ggthemes",
    "text": "ggthemes\n\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\nRefer to this link to learn more about ggplot2 Themes\n\nggplot2 themeEconomist themeWall Street Journal theme\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_wsj() +\n  theme(plot.title = element_text(size = 14))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#hrbrthemes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#hrbrthemes",
    "title": "Hands-on Exercise 2",
    "section": "hrbrthemes",
    "text": "hrbrthemes\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\n\ndefault theme_ipsum()modifying theme_ipsum()\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\naxis_title_size: increase the font size of the axis title to 18\nbase_size: increase the default axis label to 15\ngrid: remove the x-axis grid lines.\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#patchwork",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#patchwork",
    "title": "Hands-on Exercise 2",
    "section": "patchwork",
    "text": "patchwork\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package.\npatchwork is specially designed for combining separate ggplot2 graphs into a single figure. It has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\ncreate 3 statistical graphics to be used for composite graphs:\n\np1p2p3\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\np1\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\np2\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\np3\n\n\n\n\n\n\n\nCode chunk below shows a composite of graphs created using patchwork\n\n2 graphs3 graphs3 graphs with tagCreating figure with insert\n\n\nCode below shows a composite of two histograms created using patchwork\n\np1 + p2\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\npatchwork provides auto-tagging to identify subplots\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\ninset_element() place one or several plots freely on top or below another plot\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-multiple-packages",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-multiple-packages",
    "title": "Hands-on Exercise 2",
    "section": "combining multiple packages",
    "text": "combining multiple packages\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist() +\n  theme(plot.title = element_text(size = 12))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#stacked-bar-chart-of-race-distribution-by-gender",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#stacked-bar-chart-of-race-distribution-by-gender",
    "title": "Hands-on Exercise 2",
    "section": "Stacked Bar Chart of Race Distribution by Gender",
    "text": "Stacked Bar Chart of Race Distribution by Gender\n\n\nShow the code\np4 &lt;- ggplot(data = exam_data, \n       aes(x = reorder(RACE, -table(RACE)[RACE]), fill = GENDER)) +\n  geom_bar(position = \"stack\",\n           alpha = 0.9) +\n  geom_text(\n    aes(label = after_stat(count)),\n    stat = \"count\",\n    position = position_stack(vjust = 0.5),\n    size = 3,\n    color = \"white\"\n  ) +\n  labs(title = \"Race Distribution by Gender\", x = \"Race\", y = \"Number of Students\") +\n  theme_fivethirtyeight()\np4"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#boxplot-of-english-scores-by-class",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#boxplot-of-english-scores-by-class",
    "title": "Hands-on Exercise 2",
    "section": "Boxplot of English Scores by Class",
    "text": "Boxplot of English Scores by Class\n\n\nShow the code\np5 &lt;- ggplot(data = exam_data, \n       aes(x = CLASS, y = ENGLISH)) +\n  geom_boxplot(fill = \"grey90\", color = \"grey25\") +\n  geom_hline(yintercept = mean(exam_data$ENGLISH), linetype = \"dashed\", color = \"#CD2626\") +\n  stat_summary(\n    fun = mean, \n    geom = \"point\", \n    color = \"#CD2626\"\n  ) +\n  annotate(\n    \"text\", \n    x = 1,  y = mean(exam_data$ENGLISH) + 2,\n    label = paste(\"Avg:\", round(mean(exam_data$ENGLISH), 2)),\n    color = \"#CD2626\"\n  ) +\n  coord_cartesian(ylim = c(0, 100)) +\n  labs(\n    title = \"English Scores by Class\",\n    x = \"Class\",\n    y = \"English Score\"\n  ) +\n  theme_wsj()\np5"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#scatterplot-of-math-and-science-scores",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#scatterplot-of-math-and-science-scores",
    "title": "Hands-on Exercise 2",
    "section": "Scatterplot of Math and Science Scores",
    "text": "Scatterplot of Math and Science Scores\n\n\nShow the code\np6 &lt;- ggplot(data = exam_data,\n       aes(x = MATHS, y = SCIENCE)) +\n  geom_point(aes(color = GENDER), size = 1.5, alpha = 0.7) +\n  geom_hline(yintercept = 50, linetype = \"dashed\", color = \"gray\") +  \n  geom_vline(xintercept = 50, linetype = \"dashed\", color = \"gray\") +  \n  geom_smooth(method = \"lm\", size = 0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  labs(\n    title = \"Correlation between Math and Science Scores\",\n    x = \"Math Score\",\n    y = \"Science Score\"\n  ) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\np6"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#density-plot-of-english-scores-by-class",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#density-plot-of-english-scores-by-class",
    "title": "Hands-on Exercise 2",
    "section": "Density Plot of English Scores by Class",
    "text": "Density Plot of English Scores by Class\n\n\nShow the code\np7 &lt;- ggplot(data = exam_data, \n       aes(x = ENGLISH, fill = GENDER)) +\n  geom_density(alpha = 0.5, color = \"black\", linewidth = 0.3) + \n  labs(title = \"Distribution of English Scores by Class\", x = \"English Score\") +\n  theme_tufte() +\n  facet_grid(CLASS ~ .) +\n  theme(axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        legend.text = element_text(size = 8),  \n        legend.title = element_text(size = 8))\np7"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#composite-chart",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#composite-chart",
    "title": "Hands-on Exercise 2",
    "section": "Composite Chart",
    "text": "Composite Chart\n\npatchwork &lt;- (p4 / p6) | p7\npatchwork & theme_economist() +\n  theme(plot.title = element_text(size = 15))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html",
    "title": "Hands-on Exercise 5b",
    "section": "",
    "text": "a summary of Heatmap for Visualising and Analysing Multivariate Data - Qucik access to Visualising Heatmap\na summary of Visual Multivariate Analysis with Parallel Coordinates Plot - Qucik access to Parallel Coordinates Plot\na summary of Creating Ternary Plot with R - Qucik access to Ternary Plot"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#heatmap",
    "title": "Hands-on Exercise 5b",
    "section": "Heatmap",
    "text": "Heatmap\n\n\n\npackage\nR\nheatmaply\n\n\nfunc\nheatmap()\nheatmaply()\n\n\ncommon arguement\nRowv\nColv\nscale\ncexRow\ncexCol\nmargins\nscale\nnormalize(data)\npercentize(data)\ndist_method\nhclust_method\nseriate\ncolors\n\n\nType\nstatic\ninteractive"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#parallel",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#parallel",
    "title": "Hands-on Exercise 5b",
    "section": "Parallel Coordinates Plot",
    "text": "Parallel Coordinates Plot\n\n\n\npackage\nGGally\nparallelPlot\n\n\nfunc\nggparcoord()\nparallelPlot()\n\n\ncommon arguement\ngroupColumn\nscale\nalphaLines\nboxplot\ncontinuousCS\nhistoVisibility\n\n\nType\nstatic\ninteractive"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#ternary-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#ternary-plot",
    "title": "Hands-on Exercise 5b",
    "section": "Ternary Plot",
    "text": "Ternary Plot\n\n\n\npackage\nggtern\nPlotly R\n\n\nfunc\nggtern()\nplot_ly()\n\n\ncommon arguement\naes(x, y, z)\nplot_ly( data,\nx, y, x,\ntype = \"scatterternary\")\n%&gt;%\nlayout(annotations, ternary)\n\n\nType\nstatic\ninteractive"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#data-preparation",
    "title": "Hands-on Exercise 5b",
    "section": "Data Preparation",
    "text": "Data Preparation\ncode chunk below to install and launch seriation, heatmaply, dendextend and tidyverse in RStudio.\n\n\nCode\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\n\nWorld Happines 2018 report will be used. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\n\nImportingRenameConvert to Matrix\n\n\nread_csv() of readr is used to import WHData-2018.csv into R and parsed it into tibble R data frame format.\n\n\nCode\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\n\n\n\nrename rows to country name instead of row number\n\n\nCode\nrow.names(wh) &lt;- wh$Country\n\n\n\n\ndata has to be a matrix to make a heatmap. The code chunk below transform wh into a data matrix\n\n\nCode\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#heatmap-of-r-stats",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#heatmap-of-r-stats",
    "title": "Hands-on Exercise 5b",
    "section": "heatmap() of R Stats",
    "text": "heatmap() of R Stats\nheatmap() of R stats package draws a simple heatmap.\n\nDefaultWith dendrogramsNormalize\n\n\nuse heatmap() of Base Stats to plot a heatmap\n\n\nCode\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\nNote:\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\n\n\n\n\nCode\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\nNote:\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\nHowever, this heatmap is not really informative as the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same. Thus, we need to normalize this matrix.\n\n\n\n\nCode\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\nNotice that the values are scaled now. margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#interactive-heatmap-with-heatmaply",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#interactive-heatmap-with-heatmaply",
    "title": "Hands-on Exercise 5b",
    "section": "Interactive Heatmap with heatmaply",
    "text": "Interactive Heatmap with heatmaply\nheatmaply is an R package for building interactive cluster heatmap which allows hovering and zooming into a region of the heatmap.\nDifferent from heatmap() of R, for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap. The text label of each raw, on the other hand, is placed on the right hand side of the heat map.\n\nDefault Plot\nThe code chunk creates an interactive heatmap by using heatmaply package.\n\n\nCode\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\n\n\nData Transformation\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThe package offers 3 main data transformation methods, namely: scale, normalise and percentilse to ensure all the variables have comparable values.\n\nScalingNormalizingPercentising\n\n\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nThe code chunk below is used to scale variable values columewise.\n\n\nCode\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\n\nCode\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n\n\n\nClustering Algorithm\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclustfun: hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.\n\nManual approachStatistical approach\n\n\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\n\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\n\nCode\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\n\nCode\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\nFigure above shows that k=3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\n\n\n\n\nSeriation\nOne of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we meet our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\n\nOLOGWMeanNone\n\n\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)).\n\n\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\n\n“GW” (Gruvaeus and Wainer) aims for the same goal but uses a potentially faster heuristic\n\n\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\n\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")\n\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\n\n\n\n\nWorking with colour palettes\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Blues colour palette of rColorBrewer is used\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)\n\n\n\n\n\n\n\n\nFinishing touch\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#overview",
    "title": "Hands-on Exercise 5b",
    "section": "Overview",
    "text": "Overview\nParallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\n2 methods will be covered:\n\nstatistic: ggparcoord() of GGally package\ninteractive: parallelPlot package\n\nFor this exercise, the GGally, parcoords, parallelPlot and tidyverse packages will be used. The code chunks below are used to install and load the packages in R.\n\n\nCode\npacman::p_load(GGally, parallelPlot, tidyverse)\n\n\nThe same World Happinees 2018 will be used and the data frame is named as wh\n\n\nCode\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#static-parallel-coordinates-plot---ggparcoord",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#static-parallel-coordinates-plot---ggparcoord",
    "title": "Hands-on Exercise 5b",
    "section": "Static Parallel Coordinates Plot - ggparcoord()",
    "text": "Static Parallel Coordinates Plot - ggparcoord()\n\nDefaultWith BoxplotFacetRotating Text LabelAdjusting Text Label\n\n\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n2 argument namely data and columns is used.\n\nData: is used to map the data object (i.e. wh)\n\n\n\ncolumns: select the columns for preparing the parallel coordinates plot\n\n\n\nThe basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. Boxplot will be included.\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\ngroupColumn : group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale : scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines : reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot : urn on the boxplot by using logical TRUE. The default is FALSE.\ntitle : provide the parallel coordinates plot a title.\n\n\n\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\nSome of the variable names overlap on x-axis, rotate the labels by 30 degrees using theme() function in ggplot2\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\naxis.text.x : argument to theme() function. And specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree.\n\n\n\nadjusting the text location using hjust argument to theme’s text element with element_text(). axis.text.x is used to change the look of x-axis text.\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "title": "Hands-on Exercise 5b",
    "section": "Plotting Interactive Parallel Coordinates Plot: parallelPlot methods",
    "text": "Plotting Interactive Parallel Coordinates Plot: parallelPlot methods\nparallelPlot is an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and d3.js. It can build interactive parallel coordinates plot.\n\nDefaultRotate axis labelColour schemeWith Histogram\n\n\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\n\nCode\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\n\n\n\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\n\nCode\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\n\nWe can change the default blue colour scheme by using continousCS argument as shown in the code chunl below.\n\n\nCode\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\n\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\n\nCode\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#data-preparation-1",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#data-preparation-1",
    "title": "Hands-on Exercise 5b",
    "section": "Data Preparation",
    "text": "Data Preparation\nSingapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data will be used.\n\nImportFeature Engineering\n\n\nTo import respopagsex2000to2018_tidy.csv into R, read_csv() function of readr package will be used.\n\n\nCode\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\")\n\n\n\n\nuse the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\n\n\nCode\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#plotting-ternary-diagram-with-r",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#plotting-ternary-diagram-with-r",
    "title": "Hands-on Exercise 5b",
    "section": "Plotting Ternary Diagram with R",
    "text": "Plotting Ternary Diagram with R\n\nstatic - Defaultstatic - rmb themeinteractive\n\n\nUse ggtern() function of ggtern package to create a simple ternary plot.\n\n\nCode\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nCode\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R\n\n\nCode\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "According to an official report by Ministry of Suatainbility and the Environment as shown in the infographic below:\n\nDaily mean temperature are projected to increase by 1.4 to 4.6, and\nThe contrast between the wet months (November to January) and dry month (February and June to September) is likely to be more pronounced.\n\n\nThis project will apply suitable interactive techniques to verify the assertions mentioned in the second portion, examining the pronounced contrast between the wet months (November to January) and the dry months (February, and June to September). The complete project brief is available here."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#project-brief",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#project-brief",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "According to an official report by Ministry of Suatainbility and the Environment as shown in the infographic below:\n\nDaily mean temperature are projected to increase by 1.4 to 4.6, and\nThe contrast between the wet months (November to January) and dry month (February and June to September) is likely to be more pronounced.\n\n\nThis project will apply suitable interactive techniques to verify the assertions mentioned in the second portion, examining the pronounced contrast between the wet months (November to January) and the dry months (February, and June to September). The complete project brief is available here."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-selection",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-selection",
    "title": "Take-home Exercise 3",
    "section": "Data Selection",
    "text": "Data Selection\nHistorical daily rainfall records have been meticulously maintained and is accessible here. Changi station was strategically chosen for its status as the longest-serving climate station, boasting the most comprehensive dataset.\nThe climate maps below reveals a significant contrast in rainfall between December (indicated by the darkest blue) and February (represented by the lightest blue). However, February has fewer days. To facilitate a more straightforward analysis, data from July, a month with an equal number of days, will be used for comparison alongside December.\n\nThe data, consisting of historical daily temperature and rainfall records for every July and December from the years 1983, 1993, 2003, 2013, and 2023, has been downloaded from Historical Daily Records, in the format of 'DAILYDATA_S24_YYYYMM.csv'"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#loading-r-packages",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#loading-r-packages",
    "title": "Take-home Exercise 3",
    "section": "Loading R packages",
    "text": "Loading R packages\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse,\n               readxl, gifski, gapminder,\n               plotly, gganimate,networkD3, \n               ggtext, grid, ggnewscale,shadowtext)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#importing-data",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#importing-data",
    "title": "Take-home Exercise 3",
    "section": "Importing Data",
    "text": "Importing Data\nThe code chunk below use read_csv to import datasets for July and December across various years, and decode the data using “ISO-8859-1” for all past data except 2023 data.\n\n\nCode\njul_83 &lt;- read_csv(\"data/DAILYDATA_S24_198307.csv\", locale = locale(encoding = \"ISO-8859-1\"))\njul_93 &lt;- read_csv(\"data/DAILYDATA_S24_199307.csv\", locale = locale(encoding = \"ISO-8859-1\"))\njul_03 &lt;- read_csv(\"data/DAILYDATA_S24_200307.csv\", locale = locale(encoding = \"ISO-8859-1\"))\njul_13 &lt;- read_csv(\"data/DAILYDATA_S24_201307.csv\", locale = locale(encoding = \"ISO-8859-1\"))\njul_23 &lt;- read_csv(\"data/DAILYDATA_S24_202307.csv\")\ndec_83 &lt;- read_csv(\"data/DAILYDATA_S24_198312.csv\", locale = locale(encoding = \"ISO-8859-1\"))\ndec_93 &lt;- read_csv(\"data/DAILYDATA_S24_199312.csv\", locale = locale(encoding = \"ISO-8859-1\"))\ndec_03 &lt;- read_csv(\"data/DAILYDATA_S24_200312.csv\", locale = locale(encoding = \"ISO-8859-1\"))\ndec_13 &lt;- read_csv(\"data/DAILYDATA_S24_201312.csv\", locale = locale(encoding = \"ISO-8859-1\"))\ndec_23 &lt;- read_csv(\"data/DAILYDATA_S24_202312.csv\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#merging-and-selecting-dataframe",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#merging-and-selecting-dataframe",
    "title": "Take-home Exercise 3",
    "section": "Merging and Selecting Dataframe",
    "text": "Merging and Selecting Dataframe\nUpon examining the data, 2023 dataset had different naming conventions for some columns. The code chunk below rename and combine the dataset use rbind.\n\ndec_23_rename &lt;- dec_23 %&gt;% \n  rename(`Highest 30 Min Rainfall (mm)` = `Highest 30 min Rainfall (mm)`,\n         `Highest 60 Min Rainfall (mm)` = `Highest 60 min Rainfall (mm)`,\n         `Highest 120 Min Rainfall (mm)` = `Highest 120 min Rainfall (mm)`)\n\njul_23_rename &lt;- jul_23 %&gt;% \n  rename(`Highest 30 Min Rainfall (mm)` = `Highest 30 min Rainfall (mm)`,\n         `Highest 60 Min Rainfall (mm)` = `Highest 60 min Rainfall (mm)`,\n         `Highest 120 Min Rainfall (mm)` = `Highest 120 min Rainfall (mm)`)\n\ncomb_data &lt;- rbind(jul_83, dec_83, jul_93, dec_93, jul_03, dec_03, jul_13, dec_13, jul_23_rename, dec_23_rename)\n\n\nFiltering Rainfall Related Data\nThe code chunk below filtered columns relevant to the rainfall analysis Daily Rainfall Total (mm) and renaming them to daily_rainfall for ease of reference.\n\nrainfall &lt;- comb_data %&gt;% \n  select(Year, Month, Day, `Daily Rainfall Total (mm)`) %&gt;% \n  rename(`daily_rainfall` = `Daily Rainfall Total (mm)`)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#summary-statistics",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#summary-statistics",
    "title": "Take-home Exercise 3",
    "section": "Summary Statistics",
    "text": "Summary Statistics\nA quick summary statistic of the data frame is conducted as below\n\nData StructureFirst 5 RowsData HealthSummary data\n\n\nthe code below use dim() to check the dataframe dimension\n\ndim(rainfall)\n\n[1] 310   4\n\n\nThe dataset comprises 310 observations, with 4 variables. 5 years of July and December Data, 31*5*2 = 310 days\n\nstr(rainfall)\n\ntibble [310 × 4] (S3: tbl_df/tbl/data.frame)\n $ Year          : num [1:310] 1983 1983 1983 1983 1983 ...\n $ Month         : num [1:310] 7 7 7 7 7 7 7 7 7 7 ...\n $ Day           : num [1:310] 1 2 3 4 5 6 7 8 9 10 ...\n $ daily_rainfall: num [1:310] 8.7 0 5.3 6.2 39.5 14.9 0 0 10.5 55.5 ...\n\n\nThe dataset presents’Year’, ‘Month’, and ‘Day’ information in separate columns. While this format is advantageous for certain types of grouping and categorization, combining into a datetime format can significantly facilitate time series analysis.\n\n\nCode\nrainfall &lt;- rainfall %&gt;% \n  mutate(date = as.Date(paste(Year, Month, Day, sep=\"-\")))\n\n\n\n\nDisplaying first 5 rows using head()\n\nhead(rainfall)\n\n# A tibble: 6 × 5\n   Year Month   Day daily_rainfall date      \n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;          &lt;dbl&gt; &lt;date&gt;    \n1  1983     7     1            8.7 1983-07-01\n2  1983     7     2            0   1983-07-02\n3  1983     7     3            5.3 1983-07-03\n4  1983     7     4            6.2 1983-07-04\n5  1983     7     5           39.5 1983-07-05\n6  1983     7     6           14.9 1983-07-06\n\n\n\n\nthe code below use anyDuplicated() to check if any duplicated entries in the dataset.\n\nanyDuplicated(rainfall)\n\n[1] 0\n\n\nthe code use is.na() to check for total number of missing entries in the dataset.\n\nsum(is.na(rainfall))\n\n[1] 0\n\n\nAll observations are unique, and there is no missing data in the dataframe.\n\n\n\nsummary(rainfall)\n\n      Year          Month           Day     daily_rainfall   \n Min.   :1983   Min.   : 7.0   Min.   : 1   Min.   :  0.000  \n 1st Qu.:1993   1st Qu.: 7.0   1st Qu.: 8   1st Qu.:  0.000  \n Median :2003   Median : 9.5   Median :16   Median :  0.600  \n Mean   :2003   Mean   : 9.5   Mean   :16   Mean   :  8.031  \n 3rd Qu.:2013   3rd Qu.:12.0   3rd Qu.:24   3rd Qu.:  8.700  \n Max.   :2023   Max.   :12.0   Max.   :31   Max.   :164.400  \n      date           \n Min.   :1983-07-01  \n 1st Qu.:1993-07-16  \n Median :2003-09-30  \n Mean   :2003-09-30  \n 3rd Qu.:2013-12-15  \n Max.   :2023-12-31"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#feature-engineering",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#feature-engineering",
    "title": "Take-home Exercise 3",
    "section": "Feature Engineering",
    "text": "Feature Engineering\n\nSeasonalityIf RainIntensity of Rain\n\n\ncreate new col to define dry and wet season\n\nrainfall &lt;- rainfall %&gt;%\n  mutate(\n    season = case_when(\n      Month == 7 ~ \"Dry Season\",\n      Month == 12 ~ \"Wet Season\"\n    )\n  )\n\n\n\nIn order to undersatand the Frequency of rains, a new column is created to check if that day rains\nAccording to Meteorological Service Singapore, A day is considered to have “rained” if the total rainfall for that day is 0.2mm or more\nThe code chunk below creates a new column to check the daily rainfall and decide if the day rains,\n\nrainfall &lt;- rainfall %&gt;%\n  mutate(\n    if_rain = daily_rainfall &gt; 0.2\n  )\n\n\n\nIn this study, I analyze the distribution of daily rainfall volumes, as shown in histogram below. A notable observation from this graph is its rightward skew, indicating a concentration of days with lower rainfall volumes and fewer instances of high rainfall.\n\n\nCode\nfiltered_rainfall &lt;- rainfall %&gt;% filter(if_rain == TRUE)\n\nggplot(filtered_rainfall, aes(x = daily_rainfall)) + \n  geom_histogram(bins = 20) +  \n  theme_minimal() +\n  labs(y = \"Number of Days\", x = \"Daily Rainfall (mm)\")  \n\n\n\n\n\nUnderstanding the severity of precipitation is crucial. Classification of daily rainfall intensity is crucial for our analysis. In this context, I adopt the classification standards set by the Chinese Meteorology Department used under this paper, which are as follows:\n\nLess than 0.2 mm: Not rain\n0.2-10 mm: Light rainfall\n10-25 mm: Moderate rainfall\n25-50 mm: Heavy rainfall\n50-100 mm: Storm\n100-250 mm: Severe storm\n250 mm or more: Extreme storm\n\nThe code below use dplyr package to create a new column intensity.\n\n\nCode\nrainfall &lt;- rainfall %&gt;%\n  mutate(\n    Intensity = case_when(\n      daily_rainfall &lt; 0.2 ~ \"Not rain\",\n      daily_rainfall &gt;= 0.2 & daily_rainfall &lt; 10 ~ \"Light rainfall\",\n      daily_rainfall &gt;= 10 & daily_rainfall &lt; 25 ~ \"Moderate rainfall\",\n      daily_rainfall &gt;= 25 & daily_rainfall &lt; 50 ~ \"Heavy rainfall\",\n      daily_rainfall &gt;= 50 & daily_rainfall &lt; 100 ~ \"Storm\",\n      daily_rainfall &gt;= 100 & daily_rainfall &lt; 250 ~ \"Severe storm\",\n      daily_rainfall &gt;= 250 ~ \"Extreme storm\"\n    )\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#volume-of-rainfall",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#volume-of-rainfall",
    "title": "Take-home Exercise 3",
    "section": "Volume of Rainfall",
    "text": "Volume of Rainfall\nOn the bigger picture, it is necessary to understand the total rainfall within the selected month between the dry and wet season across the years,\nthis drawing is inspired by the economist\n\n\nCode\n# define colors scheme\nBLUE &lt;- \"#33CCCC\"\nRED &lt;- \"#FF6666\"\n\n# define labels for the lines\nline_labels&lt;- data.frame(\n  labels = c(\"Wet Season\", \"Dry Season\"),\n  x = c(1983, 1983),\n  y = c(390, 160),\n  color = c(RED, BLUE)\n)\n\n# group by to get monthly rainfall\ntotal_rainfall &lt;- rainfall %&gt;%\n  group_by(Year, season) %&gt;%\n  summarise(accumulated_rainfall = sum(daily_rainfall))\n\n# line plot with point \nplt1 &lt;- ggplot(total_rainfall, aes(x = Year, y = accumulated_rainfall)) +\n  geom_line(aes(color = season), size = 1) +\n  geom_point(\n    aes(fill = season), \n    size = 5, \n    pch = 21, \n    color = \"white\", \n    stroke = 1 \n  ) +\n  scale_color_manual(values = c(RED, BLUE)) +\n  scale_fill_manual(values = c(RED, BLUE)) +\n  theme(legend.position = \"none\") \n\n# setting drawing style\nplt1 &lt;- plt1 +\n  scale_x_continuous(\n    limits = c(1980, 2025),\n    expand = c(0, 0), \n    breaks = c(1983, 1993, 2003, 2013, 2023),  \n    labels = c(\"1983\", \"1993\", \"2003\", \"2013\", '2023') \n  ) +\n  scale_y_continuous(\n    limits = c(0, 410),\n    breaks = seq(0, 400, by = 50), \n    expand = c(0, 0)\n  ) + \n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    panel.grid = element_blank(),\n    panel.grid.major.y = element_line(color = \"#A8BAC4\", size = 0.3),\n    axis.ticks.length.y = unit(0, \"mm\"), \n    axis.ticks.length.x = unit(2, \"mm\"),\n    axis.title = element_blank(),\n    axis.line.x.bottom = element_line(color = \"black\"),\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size = 10)\n  )\n\n# adding line labels \nplt4 &lt;- plt1 + \n  new_scale_color() + \n  geom_shadowtext(\n    aes(x, y, label = labels, color = color),\n    data = line_labels,\n    hjust = 0, \n    bg.colour = \"white\", \n    bg.r = 0.4, \n    size = 3\n  ) \n\n# Add labels for y axis\nplt4 &lt;- plt4 + \n  geom_text(\n    data = data.frame(x = 2025, y = seq(0, 400, by = 50)),\n    aes(x, y, label = y),\n    hjust = 1, \n    vjust = 0, \n    nudge_y = 32 * 0.01, \n    size = 3\n  )\n\n# Add title\nplt4 &lt;- plt4 +\n  labs(\n    title = \"**Selected Total Monthly Rainfall,** in mm\",\n  ) + \n  theme(\n    plot.title = element_markdown(\n      size = 15\n    )\n  )\n\nplt4"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#frequency-of-rainfall",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#frequency-of-rainfall",
    "title": "Take-home Exercise 3",
    "section": "Frequency of Rainfall",
    "text": "Frequency of Rainfall\nFurther, it’s important to gauge the frequency of rainfall and its corresponding intensity. This aspect looks into how often it rains and the typical severity of these rainfall events.\n\n\nCode\n# set the order\nrainfall$Intensity &lt;- factor(rainfall$Intensity, levels = c(\"Not rain\", \n                                                            \"Light rainfall\",\n                                                            \"Moderate rainfall\", \n                                                            \"Heavy rainfall\", \n                                                            \"Storm\",\n                                                            \"Severe storm\", \n                                                            \"Extreme storm\"))\n\n# get summary data\nrainfall_summary &lt;- rainfall %&gt;%\n  group_by(Year, season, Intensity) %&gt;%\n  summarise(days_count = n(), .groups = 'drop')\n\n# set color scale\ncolor_scale &lt;- scale_fill_manual(values = c(\"Not rain\" = \"grey\",\n                                            \"Light rainfall\" = \"#ADD8E6\",\n                                            \"Moderate rainfall\" = \"#87CEEB\",\n                                            \"Heavy rainfall\" = \"#00BFFF\",\n                                            \"Storm\" = \"#1E90FF\",\n                                            \"Severe storm\" = \"#0000CD\",\n                                            \"Extreme storm\" = \"dark blue\"))\n\n# Plot as a stacked bar chart\nplt3 &lt;- ggplot(rainfall_summary, aes(x = factor(Year), y = days_count, fill = Intensity)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  geom_text(aes(label = days_count), position = position_stack(vjust = 0.5), color = \"white\", size = 2.5) +  # Add white labels\n  facet_wrap(~season) +\n  labs(\n    title = \"Frequency of Rainfall Intensity in Selected Month\",\n    x = \"Year\",\n    y = \"Number of Days\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\"),  \n    axis.title = element_text(face = \"bold\")   \n  ) +\n  color_scale\n\nplt3"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#intensity-of-rainfall",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#intensity-of-rainfall",
    "title": "Take-home Exercise 3",
    "section": "Intensity of Rainfall",
    "text": "Intensity of Rainfall\nDelving deeper, I analyze the distribution and intensity of daily rainfall. This granular view provides insight into the daily variations and characteristics of rainfall, offering a detailed perspective on its intensity and distribution patterns.\n\n\nCode\n# set the color scale for daily rainfall based on intensity\ncolor_scale &lt;- scale_color_manual(values = c(\"Not rain\" = \"white\",\n                                             \"Light rainfall\" = \"#ADD8E6\",\n                                             \"Moderate rainfall\" = \"#87CEEB\",\n                                             \"Heavy rainfall\" = \"#00BFFF\",\n                                             \"Storm\" = \"#1E90FF\",\n                                             \"Severe storm\" = \"#0000CD\",\n                                             \"Extreme storm\" = \"dark blue\"),\n                                  breaks = c(\"Not rain\", \"Light rainfall\", \"Moderate rainfall\", \n                                            \"Heavy rainfall\", \"Storm\", \"Severe storm\", \"Extreme storm\"))\n\n# filter only rainy days\nfiltered_rainfall &lt;- rainfall %&gt;% \n  filter(if_rain == TRUE)\n\n# plot a scatter diagram\nplt4 &lt;- ggplot(filtered_rainfall, aes(x=factor(Year), y=factor(Day), size = daily_rainfall, color = Intensity)) +\n  geom_point(alpha=0.7) +\n  scale_size_continuous(range = c(0.1, 10), name = \"Daily Rainfall\") + \n  facet_wrap(~season) +\n  color_scale +\n  guides(color = guide_legend(order = 1)) + \n  theme_minimal() +\n  labs(\n    title = \"Intensity of Daily Rainfall in Selected Month\",\n    y = \"\",\n    x = \"\" \n  ) +\n  theme(\n    plot.title = element_text(face = \"bold\")\n  ) \n\nplt4"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#static-dashboard",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#static-dashboard",
    "title": "Take-home Exercise 3",
    "section": "Static Dashboard",
    "text": "Static Dashboard\n\n\nCode\npatchwork &lt;- (plt1 | plt3) / (plt2 | plt4)\npatchwork + \n  plot_annotation(title = \"Volumn, Frequency, Intensity of Rainfall Comparasion in Selected Months\")\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nVolume\nRegarding the total volume of monthly rainfall, both dry and wet seasons appear to have decreased from 1983 to 2023. There is no clear pattern in the difference between the two seasons in the selected data.\nInterestingly, when examining the average daily rainfall for rainy days, the wet season’s average gradually declines over time, while the dry season’s average actually increases. Specifically, in 2023, the mean daily rainfall for the dry season is higher than that of the wet season. The standard error for the wet season diminishes over time, indicating more consistent rainfall amounts, whereas it increases for the dry season, suggesting greater variability. This inconsistency in the dry season, with larger mean values, might be attributed to anomalies, as can also be inferred from the chart at the bottom right.\nWhen analyzing the two charts in parallel, the wet season exhibits higher total monthly rainfall but lower average rainfall on rainy days as we approach 2023. This suggests a more frequent, yet lighter, rainfall pattern in the wet season, supported by the higher proportion of blue in the bottom left chart and smaller blue bubbles in the wet season on the right chart. In contrast, the dry season demonstrates a more irregular rainfall pattern. Despite more non-rainy days and lower total monthly rainfall, the average rainfall actually increases.\nFrequency\nThe number of rainy days from 1983 to 2023 increases in the wet season and decreases in the dry season. Considering the frequency of rainy days, there is a more pronounced contrast between the wet and dry seasons over the years in the selected data. However, the occurrence of heavier rains (indicated by darker colors) varies over time.\nIntensity\nIn terms of rainfall intensity, earlier years seem to have experienced more extreme rainfall. The bottom chart shows more dots (rainy days) for the wet season in 2023 compared to earlier years, and fewer dots for the dry season. However, the intensity of rainfall, especially heavy rainfall, has decreased.\n\n\nAs the static charts only shows an overall trends, it would be more interesting to interactively filter and select based on the rainy patterns, to understand and dive into the overall rainy behaviors between dry and wet season across the years."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#interactive-dashboard",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#interactive-dashboard",
    "title": "Take-home Exercise 3",
    "section": "Interactive Dashboard",
    "text": "Interactive Dashboard\n\n\nCode\nplt1_int &lt;- ggplotly(plt1, tooltip = \"text\") %&gt;%\n  layout(showlegend = FALSE)\n# plt1_int \n\n\n\n\nCode\nplt2_int &lt;- ggplotly(plt2)\n# plt2_int\n\n\n\n\nCode\n# get pivot table\nrainfall_pivot &lt;- rainfall_summary %&gt;%\n  pivot_wider(names_from = Intensity, values_from = days_count, values_fill = list(days_count = 0))\n\n# Convert Year to factor\nrainfall_pivot$Year &lt;- as.factor(rainfall_pivot$Year)\n\n# Define the color scale\ncolors &lt;- c(\"Not rain\" = \"grey\",\n            \"Light rainfall\" = \"#ADD8E6\",\n            \"Moderate rainfall\" = \"#87CEEB\",\n            \"Heavy rainfall\" = \"#00BFFF\",\n            \"Storm\" = \"#1E90FF\",\n            \"Severe storm\" = \"#0000CD\",\n            \"Extreme storm\" = \"dark blue\")\n\n# Create individual plots for wet season with trace\nplot_wet &lt;- plot_ly(data = filter(rainfall_pivot, season == \"Wet Season\"), \n                    x = ~Year, type = 'bar',\n                    y = ~`Severe storm`, name = 'Severe storm', marker = list(color = colors[\"Severe storm\"]),\n                    legendgroup = \"Severe storm\"\n                    ) %&gt;%\n  add_trace(y = ~Storm, name = 'Storm', marker = list(color = colors[\"Storm\"]),\n            legendgroup = \"Storm\") %&gt;%\n  add_trace(y = ~`Heavy rainfall`, name = 'Heavy rainfall', marker = list(color = colors[\"Heavy rainfall\"]),\n            legendgroup = \"Heavy rainfall\") %&gt;%\n  add_trace(y = ~`Moderate rainfall`, name = 'Moderate rainfall', marker = list(color = colors[\"Moderate rainfall\"]),\n            legendgroup = \"Moderate rainfall\") %&gt;%\n  add_trace(y = ~`Light rainfall`,name = 'Light rainfall',marker = list(color = colors[\"Light rainfall\"]),\n            legendgroup = \"Light rainfall\") %&gt;%\n  add_trace(y = ~`Not rain`, name = 'Not rain', marker = list(color = colors[\"Not rain\"]),\n            legendgroup = \"Not rain\") %&gt;%\n  layout(yaxis = list(title = 'Number of Days'), barmode = 'stack')\n\n\n# Create individual plots for dry season with trace\nplot_dry &lt;- plot_ly(data = filter(rainfall_pivot, season == \"Dry Season\"), \n                    x = ~Year, type = 'bar',\n                    y = ~`Severe storm`, name = 'Severe storm', marker = list(color = colors[\"Severe storm\"]),\n                    legendgroup = \"Severe storm\", showlegend = FALSE\n                    ) %&gt;%\n  add_trace(y = ~Storm, name = 'Storm', marker = list(color = colors[\"Storm\"]),\n            legendgroup = \"Storm\", showlegend = FALSE) %&gt;%\n  add_trace(y = ~`Heavy rainfall`, name = 'Heavy rainfall', marker = list(color = colors[\"Heavy rainfall\"]),\n            legendgroup = \"Heavy rainfall\", showlegend = FALSE) %&gt;%\n  add_trace(y = ~`Moderate rainfall`, name = 'Moderate rainfall', marker = list(color = colors[\"Moderate rainfall\"]),\n            legendgroup = \"Moderate rainfall\") %&gt;%\n  add_trace(y = ~`Light rainfall`,name = 'Light rainfall',marker = list(color = colors[\"Light rainfall\"]),\n            legendgroup = \"Light rainfall\", showlegend = FALSE) %&gt;%\n  add_trace(y = ~`Not rain`, name = 'Not rain', marker = list(color = colors[\"Not rain\"]),\n            legendgroup = \"Not rain\", showlegend = FALSE) %&gt;%\n  layout(yaxis = list(title = 'Number of Days'), \n         barmode = 'stack',\n         showlegend = TRUE)\n\n# Combine the plots using subplot\nplt_bar &lt;- subplot(plot_dry, plot_wet, nrows = 1, shareX = TRUE, shareY = TRUE, titleX = FALSE, titleY = TRUE) %&gt;%\n  layout(\n    annotations = list(\n      list(\n        text = \"Dry Season\", \n        x = 0.07, xref = \"paper\", y = 0.98, yref = \"paper\",\n        showarrow = FALSE, xanchor = \"center\", yanchor = \"bottom\"\n      ),\n      list(\n        text = \"Wet Season\", #\n        x = 0.59, xref = \"paper\", y = 0.98, yref = \"paper\",\n        showarrow = FALSE, xanchor = \"center\", yanchor = \"bottom\"\n      )\n    )\n  )\n\nplt3_int &lt;- plt_bar %&gt;%\n  layout(showlegend = TRUE)\n# plt4_int\n\n\n\n\nCode\nplt4_int &lt;- ggplotly(plt4) \n# plt4_int\n\n\n\n\nCode\nplt &lt;- subplot(plt1_int, plt3_int, plt2_int, plt4_int, nrows = 2, shareX = TRUE, shareY = FALSE, titleX = FALSE, titleY = FALSE)\n\n\nplt &lt;- plt %&gt;% layout(font = list(size = 3)) # Adjust size as needed\nplt"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "Superstore Sales and Profit Report\nSuperstore Sales and Profit Story\nExam Data"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#total-volume-of-rainfall",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#total-volume-of-rainfall",
    "title": "Take-home Exercise 3",
    "section": "Total Volume of Rainfall",
    "text": "Total Volume of Rainfall\nOn the bigger picture, it is necessary to understand the total rainfall within the selected month between the dry and wet season across the years.\nthis drawing is inspired by the economist and this plot\n\n\nCode\n# Define the colors scheme\nRED &lt;- \"#FF6666\"\nBLUE &lt;- \"#00BFFF\"\n\n# Group by to get monthly rainfall\ntotal_rainfall &lt;- rainfall %&gt;%\n  group_by(Year, season) %&gt;%\n  summarise(monthly_rainfall = sum(daily_rainfall), .groups = 'drop') \n\n# Pivot table\npivot_season &lt;- total_rainfall %&gt;%\n  pivot_wider(\n    names_from = season,      \n    values_from = monthly_rainfall, \n    values_fill = list(monthly_rainfall = 0) \n  )\n\n# Create custom hover text for each season\npivot_season$hover_text_dry &lt;- paste(pivot_season$Year, \"Dry Season:\", pivot_season$`Dry Season`)\npivot_season$hover_text_wet &lt;- paste(pivot_season$Year, \"Wet Season:\", pivot_season$`Wet Season`)\npivot_season$diff_label &lt;- paste(pivot_season$Year, \"Difference:\", round(pivot_season$`Wet Season` - pivot_season$`Dry Season`))\n\n# draw 2 line plot with area shaded in between\nplt1 &lt;- ggplot(pivot_season, aes(x = Year)) +\n  geom_ribbon(aes(ymin = `Dry Season`, ymax = `Wet Season`), fill = \"gray70\", alpha = 0.3) +\n  geom_line(aes(y = `Dry Season`, color = \"Dry Season\"), size = 1) +\n  geom_line(aes(y = `Wet Season`, color = \"Wet Season\"), size = 1) +\n  geom_point(aes(y = `Dry Season`, fill = \"Dry Season\", text = hover_text_dry), size = 4, pch = 21, color = \"white\", stroke = 1) +\n  geom_point(aes(y = `Wet Season`, fill = \"Wet Season\", text = hover_text_wet), size = 4, pch = 21, color = \"white\", stroke = 1) +\n  scale_color_manual(values = c(\"Dry Season\" = RED, \"Wet Season\" = BLUE)) +\n  scale_fill_manual(values = c(\"Dry Season\" = RED, \"Wet Season\" = BLUE)) +\n  geom_segment(data = pivot_season, aes(x = Year,xend = Year, \n                                        y = `Dry Season`, yend = `Wet Season`),\n               linetype = \"dashed\", color = \"grey50\") +\n  geom_text(data = pivot_season, aes(x = Year + 1 , y = (`Dry Season` + `Wet Season`) / 2, label = round(`Wet Season` - `Dry Season`), text = diff_label), \n            vjust = -0.5, size = 3) \n\n# adjust the layout\nplt1 &lt;- plt1 +\n  guides(color = guide_legend(title = \"Season\"), fill = guide_legend(title = \"Season\")) +\n  ggtitle(\"Difference in Monthly Rainfall by Season\") +\n  scale_x_continuous(\n    limits = c(1980, 2026),\n    expand = c(0, 0), \n    breaks = c(1983, 1993, 2003, 2013, 2023),  \n    labels = c(\"1983\", \"1993\", \"2003\", \"2013\", '2023') \n  ) +\n  scale_y_continuous(\n    limits = c(0, 410),\n    breaks = seq(0, 400, by = 50), \n    expand = c(0, 0)\n  ) + \n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    panel.grid = element_blank(),\n    panel.grid.major.x = element_line(color = \"#D3D3D3\", linetype = \"solid\", size = 0.2),\n    panel.grid.major.y = element_line(color = \"#D3D3D3\", size = 0.1),\n    axis.ticks.length.y = unit(0, \"mm\"), \n    axis.ticks.length.x = unit(2, \"mm\"),\n    axis.title = element_blank(),\n    axis.line.x.bottom = element_line(color = \"black\"),\n    axis.text.y = element_text(size = 10),\n    axis.text.x = element_text(size = 10),\n    plot.title = element_text(size = 12, face = \"bold\")\n  )\n\nplt1"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#average-volume-of-rainfall",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#average-volume-of-rainfall",
    "title": "Take-home Exercise 3",
    "section": "Average Volume of Rainfall",
    "text": "Average Volume of Rainfall\nFocusing on the days with precipitation, what are the mean and standard deviation of daily rainfall? To illustrate this, an error bar graph is utilized to represent these statistical measures.\n\n\nCode\n# filter only rainy days\nfiltered_rainfall &lt;- rainfall %&gt;% \n  filter(if_rain == TRUE)\n\n# Assuming 'filtered_rainfall' is your dataframe\nrainfall_summary &lt;- filtered_rainfall %&gt;%\n  group_by(Year, season) %&gt;%\n  summarise(\n    mean_rainfall = mean(daily_rainfall),\n    se_rainfall = sd(daily_rainfall) / sqrt(n()),\n    .groups = 'drop'\n  )\n\n# Create the plot\nplt2 &lt;- ggplot(rainfall_summary, aes(x = Year, y = mean_rainfall, color = season)) +\n  geom_line(size = 0.5, alpha = 0.5, linetype = \"dashed\") + \n  geom_errorbar(\n    aes(ymin = mean_rainfall - se_rainfall, ymax = mean_rainfall + se_rainfall),\n    width = 3,\n    alpha = 0.6,  \n    size = 0.8\n  ) +\n  geom_point(\n    aes(),\n    size = 2, \n    alpha = 0.9 \n  ) +\n  scale_color_manual(values = c(\"Dry Season\" = \"#FF6666\", \"Wet Season\" = \"#00BFFF\")) +\n  ggtitle(\"Standard Error of Average Daily Rainfall by Season\") +\n  xlab(\"Year\") +\n  ylab(\"Average Daily Rainfall\")\n\n# adjust the layout\nplt2 &lt;- plt2 +\n  guides(color = guide_legend(title = \"Season\"), fill = guide_legend(title = \"Season\")) +\n  scale_x_continuous(\n    limits = c(1980, 2026),\n    expand = c(0, 0), \n    breaks = c(1983, 1993, 2003, 2013, 2023),  \n    labels = c(\"1983\", \"1993\", \"2003\", \"2013\", '2023') \n  ) +\n  scale_y_continuous(\n    limits = c(0, 35),\n    breaks = seq(0, 35, by = 5), \n    expand = c(0, 0)\n  ) + \n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    panel.grid = element_blank(),\n    panel.grid.major.x = element_line(color = \"#D3D3D3\", linetype = \"solid\", size = 0.2),\n    panel.grid.major.y = element_line(color = \"#D3D3D3\", size = 0.1),\n    axis.ticks.length.y = unit(0, \"mm\"), \n    axis.ticks.length.x = unit(2, \"mm\"),\n    axis.title = element_blank(),\n    axis.line.x.bottom = element_line(color = \"black\"),\n    axis.text.y = element_text(size = 10),\n    axis.text.x = element_text(size = 10),\n    plot.title = element_text(size = 12, face = \"bold\")\n  )\n\nplt2"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#conclusion",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#conclusion",
    "title": "Take-home Exercise 3",
    "section": "Conclusion",
    "text": "Conclusion\n\n\n\n\n\n\nCLAIM\n\n\n\nThe contrast between the wet months (November to January) and dry month (February and June to September) is likely to be more pronounced.\n\n\nUpon the analysis based on the selected data\n\nthere is no strong evidence in total volume of monthly rainfall between wet and dry season across the years\nConsidering the frequency of rainy days, there is a more pronounced contrast between the wet and dry seasons over the years in the selected data.\nHowever, the occurrence of heavier rains (indicated by darker colors) varies over time. But the intensity of rainfall, especially heavy rainfall, has decreased."
  }
]